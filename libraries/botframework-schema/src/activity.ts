/**
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft
 *
 * The version of the OpenAPI document: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ActivityImportance } from './activityImportance';
import { Attachment } from './attachment';
import { AttachmentLayoutTypes } from './attachmentLayoutTypes';
import { ChannelAccount } from './channelAccount';
import { ConversationAccount } from './conversationAccount';
import { ConversationReference } from './conversationReference';
import { DeliveryModes } from './deliveryModes';
import { EndOfConversationCodes } from './endOfConversationCodes';
import { Entity } from './entity';
import { InputHints } from './inputHints';
import { MessageReaction } from './messageReaction';
import { SemanticAction } from './semanticAction';
import { SuggestedActions } from './suggestedActions';
import { TextFormatTypes } from './textFormatTypes';
import { TextHighlight } from './textHighlight';

/**
* An Activity is the basic communication type for the Bot Framework 3.0 protocol.
*/
export class Activity {
    'type'?: string;
    /**
    * Contains an ID that uniquely identifies the activity on the channel.
    */
    'id'?: string;
    /**
    * Contains the date and time that the message was sent, in UTC, expressed in ISO-8601 format.
    */
    'timestamp'?: Date;
    /**
    * Contains the local date and time of the message, expressed in ISO-8601 format.  For example, 2016-09-23T13:07:49.4714686-07:00.
    */
    'localTimestamp'?: Date;
    /**
    * Contains the name of the local timezone of the message, expressed in IANA Time Zone database format.  For example, America/Los_Angeles.
    */
    'localTimezone'?: string;
    /**
    * A string containing an IRI identifying the caller of a bot. This field is not intended to be transmitted  over the wire, but is instead populated by bots and clients based on cryptographically verifiable data  that asserts the identity of the callers (e.g. tokens).
    */
    'callerId'?: string;
    /**
    * Contains the URL that specifies the channel\'s service endpoint. Set by the channel.
    */
    'serviceUrl'?: string;
    /**
    * Contains an ID that uniquely identifies the channel. Set by the channel.
    */
    'channelId'?: string;
    'from'?: ChannelAccount;
    'conversation'?: ConversationAccount;
    'recipient'?: ChannelAccount;
    'textFormat'?: TextFormatTypes;
    'attachmentLayout'?: AttachmentLayoutTypes;
    /**
    * The collection of members added to the conversation.
    */
    'membersAdded'?: Array<ChannelAccount>;
    /**
    * The collection of members removed from the conversation.
    */
    'membersRemoved'?: Array<ChannelAccount>;
    /**
    * The collection of reactions added to the conversation.
    */
    'reactionsAdded'?: Array<MessageReaction>;
    /**
    * The collection of reactions removed from the conversation.
    */
    'reactionsRemoved'?: Array<MessageReaction>;
    /**
    * The updated topic name of the conversation.
    */
    'topicName'?: string;
    /**
    * Indicates whether the prior history of the channel is disclosed.
    */
    'historyDisclosed'?: boolean;
    /**
    * A locale name for the contents of the text field.  The locale name is a combination of an ISO 639 two- or three-letter culture code associated with a language  and an ISO 3166 two-letter subculture code associated with a country or region.  The locale name can also correspond to a valid BCP-47 language tag.
    */
    'locale'?: string;
    /**
    * The text content of the message.
    */
    'text'?: string;
    /**
    * The text to speak.
    */
    'speak'?: string;
    'inputHint'?: InputHints | string;
    /**
    * The text to display if the channel cannot render cards.
    */
    'summary'?: string;
    'suggestedActions'?: SuggestedActions;
    /**
    * Attachments
    */
    'attachments'?: Array<Attachment>;
    /**
    * Represents the entities that were mentioned in the message.
    */
    'entities'?: Array<Entity>;
    /**
    * Contains channel-specific content.
    */
    'channelData'?: any;
    /**
    * Indicates whether the recipient of a contactRelationUpdate was added or removed from the sender\'s contact list.
    */
    'action'?: string;
    /**
    * Contains the ID of the message to which this message is a reply.
    */
    'replyToId'?: string;
    /**
    * A descriptive label for the activity.
    */
    'label'?: string;
    /**
    * The type of the activity\'s value object.
    */
    'valueType'?: string;
    /**
    * A value that is associated with the activity.
    */
    'value'?: any;
    /**
    * The name of the operation associated with an invoke or event activity.
    */
    'name'?: string;
    'relatesTo'?: ConversationReference;
    'code'?: EndOfConversationCodes;
    /**
    * The time at which the activity should be considered to be \"expired\" and should not be presented to the recipient.
    */
    'expiration'?: Date;
    'importance'?: ActivityImportance;
    'deliveryMode'?: DeliveryModes;
    /**
    * List of phrases and references that speech and language priming systems should listen for
    */
    'listenFor'?: Array<string>;
    /**
    * The collection of text fragments to highlight when the activity contains a ReplyToId value.
    */
    'textHighlights'?: Array<TextHighlight>;
    'semanticAction'?: SemanticAction;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "localTimestamp",
            "baseName": "localTimestamp",
            "type": "Date"
        },
        {
            "name": "localTimezone",
            "baseName": "localTimezone",
            "type": "string"
        },
        {
            "name": "callerId",
            "baseName": "callerId",
            "type": "string"
        },
        {
            "name": "serviceUrl",
            "baseName": "serviceUrl",
            "type": "string"
        },
        {
            "name": "channelId",
            "baseName": "channelId",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "ChannelAccount"
        },
        {
            "name": "conversation",
            "baseName": "conversation",
            "type": "ConversationAccount"
        },
        {
            "name": "recipient",
            "baseName": "recipient",
            "type": "ChannelAccount"
        },
        {
            "name": "textFormat",
            "baseName": "textFormat",
            "type": "TextFormatTypes"
        },
        {
            "name": "attachmentLayout",
            "baseName": "attachmentLayout",
            "type": "AttachmentLayoutTypes"
        },
        {
            "name": "membersAdded",
            "baseName": "membersAdded",
            "type": "Array<ChannelAccount>"
        },
        {
            "name": "membersRemoved",
            "baseName": "membersRemoved",
            "type": "Array<ChannelAccount>"
        },
        {
            "name": "reactionsAdded",
            "baseName": "reactionsAdded",
            "type": "Array<MessageReaction>"
        },
        {
            "name": "reactionsRemoved",
            "baseName": "reactionsRemoved",
            "type": "Array<MessageReaction>"
        },
        {
            "name": "topicName",
            "baseName": "topicName",
            "type": "string"
        },
        {
            "name": "historyDisclosed",
            "baseName": "historyDisclosed",
            "type": "boolean"
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "speak",
            "baseName": "speak",
            "type": "string"
        },
        {
            "name": "inputHint",
            "baseName": "inputHint",
            "type": "InputHints"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        },
        {
            "name": "suggestedActions",
            "baseName": "suggestedActions",
            "type": "SuggestedActions"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<Attachment>"
        },
        {
            "name": "entities",
            "baseName": "entities",
            "type": "Array<Entity>"
        },
        {
            "name": "channelData",
            "baseName": "channelData",
            "type": "object"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "replyToId",
            "baseName": "replyToId",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "valueType",
            "baseName": "valueType",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "object"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "relatesTo",
            "baseName": "relatesTo",
            "type": "ConversationReference"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "EndOfConversationCodes"
        },
        {
            "name": "expiration",
            "baseName": "expiration",
            "type": "Date"
        },
        {
            "name": "importance",
            "baseName": "importance",
            "type": "ActivityImportance"
        },
        {
            "name": "deliveryMode",
            "baseName": "deliveryMode",
            "type": "DeliveryModes"
        },
        {
            "name": "listenFor",
            "baseName": "listenFor",
            "type": "Array<string>"
        },
        {
            "name": "textHighlights",
            "baseName": "textHighlights",
            "type": "Array<TextHighlight>"
        },
        {
            "name": "semanticAction",
            "baseName": "semanticAction",
            "type": "SemanticAction"
        }    ];

    static getAttributeTypeMap() {
        return Activity.attributeTypeMap;
    }
}

