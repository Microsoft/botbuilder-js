/**
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft
 *
 * The version of the OpenAPI document: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CardAction } from './cardAction';
import { MediaUrl } from './mediaUrl';
import { ThumbnailUrl } from './thumbnailUrl';

/**
* Video card
*/
export class VideoCard {
    /**
    * Title of this card
    */
    'title'?: string;
    /**
    * Subtitle of this card
    */
    'subtitle'?: string;
    /**
    * Text of this card
    */
    'text'?: string;
    'image'?: ThumbnailUrl;
    /**
    * Media URLs for this card. When this field contains more than one URL, each URL is an alternative format of the same content.
    */
    'media'?: Array<MediaUrl>;
    /**
    * Actions on this card
    */
    'buttons'?: Array<CardAction>;
    /**
    * This content may be shared with others (default:true)
    */
    'shareable'?: boolean;
    /**
    * Should the client loop playback at end of content (default:true)
    */
    'autoloop'?: boolean;
    /**
    * Should the client automatically start playback of media in this card (default:true)
    */
    'autostart'?: boolean;
    /**
    * Aspect ratio of thumbnail/media placeholder. Allowed values are \"16:9\" and \"4:3\"
    */
    'aspect'?: string;
    /**
    * Describes the length of the media content without requiring a receiver to open the content. Formatted as an ISO 8601 Duration field.
    */
    'duration'?: string;
    /**
    * Supplementary parameter for this card
    */
    'value'?: object;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "subtitle",
            "baseName": "subtitle",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "image",
            "baseName": "image",
            "type": "ThumbnailUrl"
        },
        {
            "name": "media",
            "baseName": "media",
            "type": "Array<MediaUrl>"
        },
        {
            "name": "buttons",
            "baseName": "buttons",
            "type": "Array<CardAction>"
        },
        {
            "name": "shareable",
            "baseName": "shareable",
            "type": "boolean"
        },
        {
            "name": "autoloop",
            "baseName": "autoloop",
            "type": "boolean"
        },
        {
            "name": "autostart",
            "baseName": "autostart",
            "type": "boolean"
        },
        {
            "name": "aspect",
            "baseName": "aspect",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "object"
        }    ];

    static getAttributeTypeMap() {
        return VideoCard.attributeTypeMap;
    }
}

