/**
 * Microsoft Bot Token API - V3.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: token
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import request = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth } from './model/models';

let defaultBasePath = 'https://token.botframework.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BotSignInApiApiKeys {
}

export interface BotSignInGetSignInUrlOptionalParams {
    codeChallenge?: string;
    emulatorUrl?: string;
    finalRedirect?: string;
}


export class BotSignInApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }
    
    constructor(CustomCredentials: { appId: string, appPassword: string})
    constructor(CustomCredentials: { appId: string, appPassword: string}, basePath?: string){
        if(basePath)
         this.basePath = basePath;
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: BotSignInApiApiKeys, value: string) {
        (this.authentications as any)[BotSignInApiApiKeys[key]].apiKey = value;
    }

    
    /**
     * 
     * @param state 
     * @param codeChallenge 
     * @param emulatorUrl 
     * @param finalRedirect 
     */
    public async getSignInUrl (state: string, optionalParams: BotSignInGetSignInUrlOptionalParams,  string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/api/botsignin/GetSignInUrl';
        let localVarQueryParameters = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling botSignInGetSignInUrl.');
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "string");
        }

        if (optionalParams.codeChallenge !== undefined) {
            localVarQueryParameters['code_challenge'] = ObjectSerializer.serialize(optionalParams.codeChallenge, "string");
        }

        if (optionalParams.emulatorUrl !== undefined) {
            localVarQueryParameters['emulatorUrl'] = ObjectSerializer.serialize(optionalParams.emulatorUrl, "string");
        }

        if (optionalParams.finalRedirect !== undefined) {
            localVarQueryParameters['finalRedirect'] = ObjectSerializer.serialize(optionalParams.finalRedirect, "string");
        }

        Object.assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: request.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        return authenticationPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                request(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject({ response: response, body: body });
                        }
                    }
                });
            });
        });
    }
}
