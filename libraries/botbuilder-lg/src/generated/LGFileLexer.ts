// Generated from ../LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 6;
	public static readonly WS_IN_NAME = 7;
	public static readonly IDENTIFIER = 8;
	public static readonly DOT = 9;
	public static readonly OPEN_PARENTHESIS = 10;
	public static readonly CLOSE_PARENTHESIS = 11;
	public static readonly COMMA = 12;
	public static readonly INVALID_SEPERATE_CHAR = 13;
	public static readonly WS_IN_BODY_IGNORED = 14;
	public static readonly IF = 15;
	public static readonly ELSEIF = 16;
	public static readonly ELSE = 17;
	public static readonly MULTI_LINE_TEXT = 18;
	public static readonly ESCAPE_CHARACTER = 19;
	public static readonly INVALID_ESCAPE = 20;
	public static readonly EXPRESSION = 21;
	public static readonly TEMPLATE_REF = 22;
	public static readonly TEXT_SEPARATOR = 23;
	public static readonly TEXT = 24;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "WHITESPACE", "COMMENTS", "WS", "NEWLINE", "HASH", 
		"DASH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", "NEWLINE_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "NEWLINE_IN_BODY", 
		"IF", "ELSEIF", "ELSE", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", 
		"EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "INVALID_TOKEN_DEFAULT_MODE", 
		"WS_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "IF", "ELSEIF", 
		"ELSE", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectIfElse = false;        // whether we are expecting IF/ELSEIF/ELSE


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 7:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 19:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 20:
			this.IF_action(_localctx, actionIndex);
			break;

		case 21:
			this.ELSEIF_action(_localctx, actionIndex);
			break;

		case 22:
			this.ELSE_action(_localctx, actionIndex);
			break;

		case 23:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 24:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 26:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 27:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 28:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 29:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectIfElse = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private IF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSEIF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 10:
			 this.ignoreWS = false; this.expectIfElse = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 17:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 20:
			return this.IF_sempred(_localctx, predIndex);

		case 21:
			return this.ELSEIF_sempred(_localctx, predIndex);

		case 22:
			return this.ELSE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private IF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectIfElse;
		}
		return true;
	}
	private ELSEIF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectIfElse;
		}
		return true;
	}
	private ELSE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.expectIfElse;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1A\u0121\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x06\x05J\n\x05\r\x05" +
		"\x0E\x05K\x03\x05\x03\x05\x03\x06\x06\x06Q\n\x06\r\x06\x0E\x06R\x03\x06" +
		"\x03\x06\x03\x07\x05\x07X\n\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b" +
		"\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x06" +
		"\vj\n\v\r\v\x0E\vk\x03\v\x03\v\x03\f\x05\fq\n\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x05\r{\n\r\x03\r\x03\r\x03\r\x07\r\x80\n\r" +
		"\f\r\x0E\r\x83\v\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x13\x06\x13\x90\n\x13\r\x13\x0E\x13\x91" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x06\x14\x99\n\x14\r\x14\x0E\x14" +
		"\x9A\x03\x14\x03\x14\x03\x15\x05\x15\xA0\n\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\xAC\n" +
		"\x16\x03\x16\x07\x16\xAF\n\x16\f\x16\x0E\x16\xB2\v\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\xC4\n\x17\x03\x17\x07" +
		"\x17\xC7\n\x17\f\x17\x0E\x17\xCA\v\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18" +
		"\xD8\n\x18\x03\x18\x07\x18\xDB\n\x18\f\x18\x0E\x18\xDE\v\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\xE9" +
		"\n\x19\f\x19\x0E\x19\xEC\v\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x05\x1A\xFD\n\x1A\x03\x1B\x03\x1B\x05\x1B\u0101\n\x1B\x03\x1C" +
		"\x03\x1C\x07\x1C\u0105\n\x1C\f\x1C\x0E\x1C\u0108\v\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u0110\n\x1D\f\x1D\x0E\x1D\u0113" +
		"\v\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x06\x1F" +
		"\u011C\n\x1F\r\x1F\x0E\x1F\u011D\x03\x1F\x03\x1F\x03\xEA\x02\x02 \x05" +
		"\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x03\r\x02\x04\x0F\x02\x05\x11\x02" +
		"\x06\x13\x02\x07\x15\x02\b\x17\x02\t\x19\x02\x02\x1B\x02\n\x1D\x02\v\x1F" +
		"\x02\f!\x02\r#\x02\x0E%\x02\x0F\'\x02\x10)\x02\x02+\x02\x02-\x02\x11/" +
		"\x02\x121\x02\x133\x02\x145\x02\x157\x02\x169\x02\x17;\x02\x18=\x02\x19" +
		"?\x02\x1A\x05\x02\x03\x04\r\x04\x02C\\c|\x06\x02\v\v\"\"\xA2\xA2\uFF01" +
		"\uFF01\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04\x02//aa\x03\x02==\x07\x02_" +
		"_ppttvv\x7F\x7F\x06\x02\f\f\x0F\x0F}}\x7F\x7F\x05\x02\f\f\x0F\x0F__\n" +
		"\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F\x7F\t\x02\v\f\x0F\x0F\"\"*+]_}}\x7F\x7F" +
		"\u0137\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x03\x17\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02\x03\x1B\x03\x02\x02" +
		"\x02\x03\x1D\x03\x02\x02\x02\x03\x1F\x03\x02\x02\x02\x03!\x03\x02\x02" +
		"\x02\x03#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x04\'\x03\x02\x02\x02\x04" +
		")\x03\x02\x02\x02\x04+\x03\x02\x02\x02\x04-\x03\x02\x02\x02\x04/\x03\x02" +
		"\x02\x02\x041\x03\x02\x02\x02\x043\x03\x02\x02\x02\x045\x03\x02\x02\x02" +
		"\x047\x03\x02\x02\x02\x049\x03\x02\x02\x02\x04;\x03\x02\x02\x02\x04=\x03" +
		"\x02\x02\x02\x04?\x03\x02\x02\x02\x05A\x03\x02\x02\x02\x07C\x03\x02\x02" +
		"\x02\tE\x03\x02\x02\x02\vG\x03\x02\x02\x02\rP\x03\x02\x02\x02\x0FW\x03" +
		"\x02\x02\x02\x11]\x03\x02\x02\x02\x13a\x03\x02\x02\x02\x15f\x03\x02\x02" +
		"\x02\x17i\x03\x02\x02\x02\x19p\x03\x02\x02\x02\x1Bz\x03\x02\x02\x02\x1D" +
		"\x84\x03\x02\x02\x02\x1F\x86\x03\x02\x02\x02!\x88\x03\x02\x02\x02#\x8A" +
		"\x03\x02\x02\x02%\x8C\x03\x02\x02\x02\'\x8F\x03\x02\x02\x02)\x98\x03\x02" +
		"\x02\x02+\x9F\x03\x02\x02\x02-\xAB\x03\x02\x02\x02/\xC3\x03\x02\x02\x02" +
		"1\xD7\x03\x02\x02\x023\xE3\x03\x02\x02\x025\xFC\x03\x02\x02\x027\xFE\x03" +
		"\x02\x02\x029\u0102\x03\x02\x02\x02;\u010C\x03\x02\x02\x02=\u0117\x03" +
		"\x02\x02\x02?\u011B\x03\x02\x02\x02AB\t\x02\x02\x02B\x06\x03\x02\x02\x02" +
		"CD\x042;\x02D\b\x03\x02\x02\x02EF\t\x03\x02\x02F\n\x03\x02\x02\x02GI\t" +
		"\x04\x02\x02HJ\n\x05\x02\x02IH\x03\x02\x02\x02JK\x03\x02\x02\x02KI\x03" +
		"\x02\x02\x02KL\x03\x02\x02\x02LM\x03\x02\x02\x02MN\b\x05\x02\x02N\f\x03" +
		"\x02\x02\x02OQ\x05\t\x04\x02PO\x03\x02\x02\x02QR\x03\x02\x02\x02RP\x03" +
		"\x02\x02\x02RS\x03\x02\x02\x02ST\x03\x02\x02\x02TU\b\x06\x02\x02U\x0E" +
		"\x03\x02\x02\x02VX\x07\x0F\x02\x02WV\x03\x02\x02\x02WX\x03\x02\x02\x02" +
		"XY\x03\x02\x02\x02YZ\x07\f\x02\x02Z[\x03\x02\x02\x02[\\\b\x07\x02\x02" +
		"\\\x10\x03\x02\x02\x02]^\x07%\x02\x02^_\x03\x02\x02\x02_`\b\b\x03\x02" +
		"`\x12\x03\x02\x02\x02ab\x07/\x02\x02bc\b\t\x04\x02cd\x03\x02\x02\x02d" +
		"e\b\t\x05\x02e\x14\x03\x02\x02\x02fg\v\x02\x02\x02g\x16\x03\x02\x02\x02" +
		"hj\x05\t\x04\x02ih\x03\x02\x02\x02jk\x03\x02\x02\x02ki\x03\x02\x02\x02" +
		"kl\x03\x02\x02\x02lm\x03\x02\x02\x02mn\b\v\x02\x02n\x18\x03\x02\x02\x02" +
		"oq\x07\x0F\x02\x02po\x03\x02\x02\x02pq\x03\x02\x02\x02qr\x03\x02\x02\x02" +
		"rs\x07\f\x02\x02st\x03\x02\x02\x02tu\b\f\x06\x02uv\b\f\x07\x02v\x1A\x03" +
		"\x02\x02\x02w{\x05\x05\x02\x02x{\x05\x07\x03\x02y{\x07a\x02\x02zw\x03" +
		"\x02\x02\x02zx\x03\x02\x02\x02zy\x03\x02\x02\x02{\x81\x03\x02\x02\x02" +
		"|\x80\x05\x05\x02\x02}\x80\x05\x07\x03\x02~\x80\t\x06\x02\x02\x7F|\x03" +
		"\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F~\x03\x02\x02\x02\x80\x83\x03\x02" +
		"\x02\x02\x81\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\x1C\x03\x02" +
		"\x02\x02\x83\x81\x03\x02\x02\x02\x84\x85\x070\x02\x02\x85\x1E\x03\x02" +
		"\x02\x02\x86\x87\x07*\x02\x02\x87 \x03\x02\x02\x02\x88\x89\x07+\x02\x02" +
		"\x89\"\x03\x02\x02\x02\x8A\x8B\x07.\x02\x02\x8B$\x03\x02\x02\x02\x8C\x8D" +
		"\t\x07\x02\x02\x8D&\x03\x02\x02\x02\x8E\x90\x05\t\x04\x02\x8F\x8E\x03" +
		"\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03" +
		"\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x94\x06\x13\x02\x02\x94\x95\x03" +
		"\x02\x02\x02\x95\x96\b\x13\x02\x02\x96(\x03\x02\x02\x02\x97\x99\x05\t" +
		"\x04\x02\x98\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x98\x03\x02" +
		"\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C\x9D\b\x14" +
		"\b\x02\x9D*\x03\x02\x02\x02\x9E\xA0\x07\x0F\x02\x02\x9F\x9E\x03\x02\x02" +
		"\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x07\f\x02" +
		"\x02\xA2\xA3\b\x15\t\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA5\b\x15\x06\x02" +
		"\xA5\xA6\b\x15\x07\x02\xA6,\x03\x02\x02\x02\xA7\xA8\x07k\x02\x02\xA8\xAC" +
		"\x07h\x02\x02\xA9\xAA\x07K\x02\x02\xAA\xAC\x07H\x02\x02\xAB\xA7\x03\x02" +
		"\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xB0\x03\x02\x02\x02\xAD\xAF\x05\t" +
		"\x04\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB2\x03\x02\x02\x02\xB0\xAE\x03\x02" +
		"\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3\x03\x02\x02\x02\xB2\xB0\x03\x02" +
		"\x02\x02\xB3\xB4\x07<\x02\x02\xB4\xB5\x06\x16\x03\x02\xB5\xB6\b\x16\n" +
		"\x02\xB6.\x03\x02\x02\x02\xB7\xB8\x07g\x02\x02\xB8\xB9\x07n\x02\x02\xB9" +
		"\xBA\x07u\x02\x02\xBA\xBB\x07g\x02\x02\xBB\xBC\x07k\x02\x02\xBC\xC4\x07" +
		"h\x02\x02\xBD\xBE\x07G\x02\x02\xBE\xBF\x07N\x02\x02\xBF\xC0\x07U\x02\x02" +
		"\xC0\xC1\x07G\x02\x02\xC1\xC2\x07K\x02\x02\xC2\xC4\x07H\x02\x02\xC3\xB7" +
		"\x03\x02\x02\x02\xC3\xBD\x03\x02\x02\x02\xC4\xC8\x03\x02\x02\x02\xC5\xC7" +
		"\x05\t\x04\x02\xC6\xC5\x03\x02\x02\x02\xC7\xCA\x03\x02\x02\x02\xC8\xC6" +
		"\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9\xCB\x03\x02\x02\x02\xCA\xC8" +
		"\x03\x02\x02\x02\xCB\xCC\x07<\x02\x02\xCC\xCD\x06\x17\x04\x02\xCD\xCE" +
		"\b\x17\v\x02\xCE0\x03\x02\x02\x02\xCF\xD0\x07g\x02\x02\xD0\xD1\x07n\x02" +
		"\x02\xD1\xD2\x07u\x02\x02\xD2\xD8\x07g\x02\x02\xD3\xD4\x07G\x02\x02\xD4" +
		"\xD5\x07N\x02\x02\xD5\xD6\x07U\x02\x02\xD6\xD8\x07G\x02\x02\xD7\xCF\x03" +
		"\x02\x02\x02\xD7\xD3\x03\x02\x02\x02\xD8\xDC\x03\x02\x02\x02\xD9\xDB\x05" +
		"\t\x04\x02\xDA\xD9\x03\x02\x02\x02\xDB\xDE\x03\x02\x02\x02\xDC\xDA\x03" +
		"\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDF\x03\x02\x02\x02\xDE\xDC\x03" +
		"\x02\x02\x02\xDF\xE0\x07<\x02\x02\xE0\xE1\x06\x18\x05\x02\xE1\xE2\b\x18" +
		"\f\x02\xE22\x03\x02\x02\x02\xE3\xE4\x07b\x02\x02\xE4\xE5\x07b\x02\x02" +
		"\xE5\xE6\x07b\x02\x02\xE6\xEA\x03\x02\x02\x02\xE7\xE9\v\x02\x02\x02\xE8" +
		"\xE7\x03\x02\x02\x02\xE9\xEC\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEA" +
		"\xE8\x03\x02\x02\x02\xEB\xED\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xED" +
		"\xEE\x07b\x02\x02\xEE\xEF\x07b\x02\x02\xEF\xF0\x07b\x02\x02\xF0\xF1\x03" +
		"\x02\x02\x02\xF1\xF2\b\x19\r\x02\xF24\x03\x02\x02\x02\xF3\xF4\x07^\x02" +
		"\x02\xF4\xFD\x07}\x02\x02\xF5\xF6\x07^\x02\x02\xF6\xFD\x07]\x02\x02\xF7" +
		"\xF8\x07^\x02\x02\xF8\xFD\x07^\x02\x02\xF9\xFA\x07^\x02\x02\xFA\xFB\t" +
		"\b\x02\x02\xFB\xFD\b\x1A\x0E\x02\xFC\xF3\x03\x02\x02\x02\xFC\xF5\x03\x02" +
		"\x02\x02\xFC\xF7\x03\x02\x02\x02\xFC\xF9\x03\x02\x02\x02\xFD6\x03\x02" +
		"\x02\x02\xFE\u0100\x07^\x02\x02\xFF\u0101\n\x05\x02\x02\u0100\xFF\x03" +
		"\x02\x02\x02\u0100\u0101\x03\x02\x02\x02\u01018\x03\x02\x02\x02\u0102" +
		"\u0106\x07}\x02\x02\u0103\u0105\n\t\x02\x02\u0104\u0103\x03\x02\x02\x02" +
		"\u0105\u0108\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03" +
		"\x02\x02\x02\u0107\u0109\x03\x02\x02\x02\u0108\u0106\x03\x02\x02\x02\u0109" +
		"\u010A\x07\x7F\x02\x02\u010A\u010B\b\x1C\x0F\x02\u010B:\x03\x02\x02\x02" +
		"\u010C\u0111\x07]\x02\x02\u010D\u0110\n\n\x02\x02\u010E\u0110\x05;\x1D" +
		"\x02\u010F\u010D\x03\x02\x02\x02\u010F\u010E\x03\x02\x02\x02\u0110\u0113" +
		"\x03\x02\x02\x02\u0111\u010F\x03\x02\x02\x02\u0111\u0112\x03\x02\x02\x02" +
		"\u0112\u0114\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\u0114\u0115\x07" +
		"_\x02\x02\u0115\u0116\b\x1D\x10\x02\u0116<\x03\x02\x02\x02\u0117\u0118" +
		"\t\v\x02\x02\u0118\u0119\b\x1E\x11\x02\u0119>\x03\x02\x02\x02\u011A\u011C" +
		"\n\f\x02\x02\u011B\u011A\x03\x02\x02\x02\u011C\u011D\x03\x02\x02\x02\u011D" +
		"\u011B\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E\u011F\x03\x02" +
		"\x02\x02\u011F\u0120\b\x1F\x12\x02\u0120@\x03\x02\x02\x02\x1D\x02\x03" +
		"\x04KRWkpz\x7F\x81\x91\x9A\x9F\xAB\xB0\xC3\xC8\xD7\xDC\xEA\xFC\u0100\u0106" +
		"\u010F\u0111\u011D\x13\b\x02\x02\x07\x03\x02\x03\t\x02\x07\x04\x02\t\x05" +
		"\x02\x06\x02\x02\t\x04\x02\x03\x15\x03\x03\x16\x04\x03\x17\x05\x03\x18" +
		"\x06\x03\x19\x07\x03\x1A\b\x03\x1C\t\x03\x1D\n\x03\x1E\v\x03\x1F\f";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

