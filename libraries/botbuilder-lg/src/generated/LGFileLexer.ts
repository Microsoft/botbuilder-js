// Generated from ../LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly IMPORT_DESC = 6;
	public static readonly IMPORT_PATH = 7;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 8;
	public static readonly WS_IN_NAME = 9;
	public static readonly IDENTIFIER = 10;
	public static readonly DOT = 11;
	public static readonly OPEN_PARENTHESIS = 12;
	public static readonly CLOSE_PARENTHESIS = 13;
	public static readonly COMMA = 14;
	public static readonly INVALID_SEPERATE_CHAR = 15;
	public static readonly WS_IN_BODY_IGNORED = 16;
	public static readonly IF = 17;
	public static readonly ELSEIF = 18;
	public static readonly ELSE = 19;
	public static readonly SWITCH = 20;
	public static readonly CASE = 21;
	public static readonly DEFAULT = 22;
	public static readonly MULTI_LINE_TEXT = 23;
	public static readonly ESCAPE_CHARACTER = 24;
	public static readonly INVALID_ESCAPE = 25;
	public static readonly EXPRESSION = 26;
	public static readonly TEMPLATE_REF = 27;
	public static readonly TEXT_SEPARATOR = 28;
	public static readonly TEXT = 29;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "WHITESPACE", "A", "C", "D", "E", "F", "H", "I", "L", 
		"S", "T", "U", "W", "STRING_LITERAL", "COMMENTS", "WS", "NEWLINE", "HASH", 
		"DASH", "IMPORT_DESC", "IMPORT_PATH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", 
		"NEWLINE_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "WS_IN_BODY", 
		"NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", 
		"MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, undefined, undefined, undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "IMPORT_DESC", 
		"IMPORT_PATH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", "IDENTIFIER", 
		"DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", "INVALID_SEPERATE_CHAR", 
		"WS_IN_BODY_IGNORED", "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", 
		"MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectKeywords = false;        // whether we are expecting IF/ELSEIF/ELSE or Switch/Case/Default keywords


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 20:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 34:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 35:
			this.IF_action(_localctx, actionIndex);
			break;

		case 36:
			this.ELSEIF_action(_localctx, actionIndex);
			break;

		case 37:
			this.ELSE_action(_localctx, actionIndex);
			break;

		case 38:
			this.SWITCH_action(_localctx, actionIndex);
			break;

		case 39:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 40:
			this.DEFAULT_action(_localctx, actionIndex);
			break;

		case 41:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 42:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 44:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 45:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 46:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 47:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectKeywords = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private IF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSEIF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = true;
			break;
		}
	}
	private SWITCH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 10:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 11:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 12:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 13:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 32:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 35:
			return this.IF_sempred(_localctx, predIndex);

		case 36:
			return this.ELSEIF_sempred(_localctx, predIndex);

		case 37:
			return this.ELSE_sempred(_localctx, predIndex);

		case 38:
			return this.SWITCH_sempred(_localctx, predIndex);

		case 39:
			return this.CASE_sempred(_localctx, predIndex);

		case 40:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private IF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectKeywords;
		}
		return true;
	}
	private ELSEIF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectKeywords;
		}
		return true;
	}
	private ELSE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.expectKeywords;
		}
		return true;
	}
	private SWITCH_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.expectKeywords;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return this.expectKeywords;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.expectKeywords;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1F\u01A2\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!" +
		"\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t" +
		")\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x07\x11\x86\n\x11\f\x11\x0E\x11\x89\v\x11\x03\x11\x03\x11" +
		"\x03\x11\x07\x11\x8E\n\x11\f\x11\x0E\x11\x91\v\x11\x03\x11\x05\x11\x94" +
		"\n\x11\x03\x12\x03\x12\x06\x12\x98\n\x12\r\x12\x0E\x12\x99\x03\x12\x03" +
		"\x12\x03\x13\x06\x13\x9F\n\x13\r\x13\x0E\x13\xA0\x03\x13\x03\x13\x03\x14" +
		"\x05\x14\xA6\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x07" +
		"\x17\xB7\n\x17\f\x17\x0E\x17\xBA\v\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x07\x18\xC0\n\x18\f\x18\x0E\x18\xC3\v\x18\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x03\x1A\x06\x1A\xCA\n\x1A\r\x1A\x0E\x1A\xCB\x03\x1A\x03\x1A\x03\x1B" +
		"\x05\x1B\xD1\n\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1C\x05\x1C\xDB\n\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\xE0\n\x1C" +
		"\f\x1C\x0E\x1C\xE3\v\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
		"\x03 \x03 \x03!\x03!\x03\"\x06\"\xF0\n\"\r\"\x0E\"\xF1\x03\"\x03\"\x03" +
		"\"\x03\"\x03#\x06#\xF9\n#\r#\x0E#\xFA\x03#\x03#\x03$\x05$\u0100\n$\x03" +
		"$\x03$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x07%\u010B\n%\f%\x0E%\u010E" +
		"\v%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x07&\u011B" +
		"\n&\f&\x0E&\u011E\v&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'" +
		"\x07\'\u0129\n\'\f\'\x0E\'\u012C\v\'\x03\'\x03\'\x03\'\x03\'\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x07(\u0139\n(\f(\x0E(\u013C\v(\x03(\x03(\x03" +
		"(\x03(\x03)\x03)\x03)\x03)\x03)\x07)\u0147\n)\f)\x0E)\u014A\v)\x03)\x03" +
		")\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x07*\u0158\n*\f*\x0E" +
		"*\u015B\v*\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03+\x07+\u0166\n+" +
		"\f+\x0E+\u0169\v+\x03+\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x03,\x03,\x03" +
		",\x03,\x03,\x03,\x03,\x05,\u017A\n,\x03-\x03-\x05-\u017E\n-\x03.\x05." +
		"\u0181\n.\x03.\x03.\x03.\x07.\u0186\n.\f.\x0E.\u0189\v.\x03.\x03.\x03" +
		".\x03/\x03/\x03/\x07/\u0191\n/\f/\x0E/\u0194\v/\x03/\x03/\x03/\x030\x03" +
		"0\x030\x031\x061\u019D\n1\r1\x0E1\u019E\x031\x031\x05\xB8\xC1\u0167\x02" +
		"\x022\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02\x02" +
		"\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02\x02\x1B\x02\x02" +
		"\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x03\'\x02\x04)\x02\x05" +
		"+\x02\x06-\x02\x07/\x02\b1\x02\t3\x02\n5\x02\v7\x02\x029\x02\f;\x02\r" +
		"=\x02\x0E?\x02\x0FA\x02\x10C\x02\x11E\x02\x12G\x02\x02I\x02\x02K\x02\x13" +
		"M\x02\x14O\x02\x15Q\x02\x16S\x02\x17U\x02\x18W\x02\x19Y\x02\x1A[\x02\x1B" +
		"]\x02\x1C_\x02\x1Da\x02\x1Ec\x02\x1F\x05\x02\x03\x04\x1B\x04\x02C\\c|" +
		"\x06\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x04\x02CCcc\x04\x02EEee\x04\x02F" +
		"Fff\x04\x02GGgg\x04\x02HHhh\x04\x02JJjj\x04\x02KKkk\x04\x02NNnn\x04\x02" +
		"UUuu\x04\x02VVvv\x04\x02WWww\x04\x02YYyy\x05\x02\f\f\x0F\x0F))\x05\x02" +
		"\f\f\x0F\x0F$$\x04\x02&&@@\x04\x02\f\f\x0F\x0F\x04\x02//aa\x03\x02==\x07" +
		"\x02__ppttvv\x7F\x7F\x06\x02\f\f\x0F\x0F}}\x7F\x7F\x05\x02\f\f\x0F\x0F" +
		"__\n\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F\x7F\t\x02\v\f\x0F\x0F\"\"*+]_}}\x7F" +
		"\x7F\u01B2\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x035\x03\x02\x02\x02\x037\x03\x02" +
		"\x02\x02\x039\x03\x02\x02\x02\x03;\x03\x02\x02\x02\x03=\x03\x02\x02\x02" +
		"\x03?\x03\x02\x02\x02\x03A\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x04E\x03" +
		"\x02\x02\x02\x04G\x03\x02\x02\x02\x04I\x03\x02\x02\x02\x04K\x03\x02\x02" +
		"\x02\x04M\x03\x02\x02\x02\x04O\x03\x02\x02\x02\x04Q\x03\x02\x02\x02\x04" +
		"S\x03\x02\x02\x02\x04U\x03\x02\x02\x02\x04W\x03\x02\x02\x02\x04Y\x03\x02" +
		"\x02\x02\x04[\x03\x02\x02\x02\x04]\x03\x02\x02\x02\x04_\x03\x02\x02\x02" +
		"\x04a\x03\x02\x02\x02\x04c\x03\x02\x02\x02\x05e\x03\x02\x02\x02\x07g\x03" +
		"\x02\x02\x02\ti\x03\x02\x02\x02\vk\x03\x02\x02\x02\rm\x03\x02\x02\x02" +
		"\x0Fo\x03\x02\x02\x02\x11q\x03\x02\x02\x02\x13s\x03\x02\x02\x02\x15u\x03" +
		"\x02\x02\x02\x17w\x03\x02\x02\x02\x19y\x03\x02\x02\x02\x1B{\x03\x02\x02" +
		"\x02\x1D}\x03\x02\x02\x02\x1F\x7F\x03\x02\x02\x02!\x81\x03\x02\x02\x02" +
		"#\x93\x03\x02\x02\x02%\x95\x03\x02\x02\x02\'\x9E\x03\x02\x02\x02)\xA5" +
		"\x03\x02\x02\x02+\xAB\x03\x02\x02\x02-\xAF\x03\x02\x02\x02/\xB4\x03\x02" +
		"\x02\x021\xBD\x03\x02\x02\x023\xC6\x03\x02\x02\x025\xC9\x03\x02\x02\x02" +
		"7\xD0\x03\x02\x02\x029\xDA\x03\x02\x02\x02;\xE4\x03\x02\x02\x02=\xE6\x03" +
		"\x02\x02\x02?\xE8\x03\x02\x02\x02A\xEA\x03\x02\x02\x02C\xEC\x03\x02\x02" +
		"\x02E\xEF\x03\x02\x02\x02G\xF8\x03\x02\x02\x02I\xFF\x03\x02\x02\x02K\u0107" +
		"\x03\x02\x02\x02M\u0113\x03\x02\x02\x02O\u0123\x03\x02\x02\x02Q\u0131" +
		"\x03\x02\x02\x02S\u0141\x03\x02\x02\x02U\u014F\x03\x02\x02\x02W\u0160" +
		"\x03\x02\x02\x02Y\u0179\x03\x02\x02\x02[\u017B\x03\x02\x02\x02]\u0180" +
		"\x03\x02\x02\x02_\u018D\x03\x02\x02\x02a\u0198\x03\x02\x02\x02c\u019C" +
		"\x03\x02\x02\x02ef\t\x02\x02\x02f\x06\x03\x02\x02\x02gh\x042;\x02h\b\x03" +
		"\x02\x02\x02ij\t\x03\x02\x02j\n\x03\x02\x02\x02kl\t\x04\x02\x02l\f\x03" +
		"\x02\x02\x02mn\t\x05\x02\x02n\x0E\x03\x02\x02\x02op\t\x06\x02\x02p\x10" +
		"\x03\x02\x02\x02qr\t\x07\x02\x02r\x12\x03\x02\x02\x02st\t\b\x02\x02t\x14" +
		"\x03\x02\x02\x02uv\t\t\x02\x02v\x16\x03\x02\x02\x02wx\t\n\x02\x02x\x18" +
		"\x03\x02\x02\x02yz\t\v\x02\x02z\x1A\x03\x02\x02\x02{|\t\f\x02\x02|\x1C" +
		"\x03\x02\x02\x02}~\t\r\x02\x02~\x1E\x03\x02\x02\x02\x7F\x80\t\x0E\x02" +
		"\x02\x80 \x03\x02\x02\x02\x81\x82\t\x0F\x02\x02\x82\"\x03\x02\x02\x02" +
		"\x83\x87\x07)\x02\x02\x84\x86\n\x10\x02\x02\x85\x84\x03\x02\x02\x02\x86" +
		"\x89\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88" +
		"\x8A\x03\x02\x02\x02\x89\x87\x03\x02\x02\x02\x8A\x94\x07)\x02\x02\x8B" +
		"\x8F\x07$\x02\x02\x8C\x8E\n\x11\x02\x02\x8D\x8C\x03\x02\x02\x02\x8E\x91" +
		"\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x92" +
		"\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x92\x94\x07$\x02\x02\x93\x83" +
		"\x03\x02\x02\x02\x93\x8B\x03\x02\x02\x02\x94$\x03\x02\x02\x02\x95\x97" +
		"\t\x12\x02\x02\x96\x98\n\x13\x02\x02\x97\x96\x03\x02\x02\x02\x98\x99\x03" +
		"\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x03" +
		"\x02\x02\x02\x9B\x9C\b\x12\x02\x02\x9C&\x03\x02\x02\x02\x9D\x9F\x05\t" +
		"\x04\x02\x9E\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0\x9E\x03\x02" +
		"\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA3\b\x13" +
		"\x02\x02\xA3(\x03\x02\x02\x02\xA4\xA6\x07\x0F\x02\x02\xA5\xA4\x03\x02" +
		"\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA8\x07\f" +
		"\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAA\b\x14\x02\x02\xAA*\x03\x02\x02" +
		"\x02\xAB\xAC\x07%\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAE\b\x15\x03\x02" +
		"\xAE,\x03\x02\x02\x02\xAF\xB0\x07/\x02\x02\xB0\xB1\b\x16\x04\x02\xB1\xB2" +
		"\x03\x02\x02\x02\xB2\xB3\b\x16\x05\x02\xB3.\x03\x02\x02\x02\xB4\xB8\x07" +
		"]\x02\x02\xB5\xB7\v\x02\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\xBA\x03\x02" +
		"\x02\x02\xB8\xB9\x03\x02\x02\x02\xB8\xB6\x03\x02\x02\x02\xB9\xBB\x03\x02" +
		"\x02\x02\xBA\xB8\x03\x02\x02\x02\xBB\xBC\x07_\x02\x02\xBC0\x03\x02\x02" +
		"\x02\xBD\xC1\x07*\x02\x02\xBE\xC0\v\x02\x02\x02\xBF\xBE\x03\x02\x02\x02" +
		"\xC0\xC3\x03\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC1\xBF\x03\x02\x02\x02" +
		"\xC2\xC4\x03\x02\x02\x02\xC3\xC1\x03\x02\x02\x02\xC4\xC5\x07+\x02\x02" +
		"\xC52\x03\x02\x02\x02\xC6\xC7\v\x02\x02\x02\xC74\x03\x02\x02\x02\xC8\xCA" +
		"\x05\t\x04\x02\xC9\xC8\x03\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xC9" +
		"\x03\x02\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCE" +
		"\b\x1A\x02\x02\xCE6\x03\x02\x02\x02\xCF\xD1\x07\x0F\x02\x02\xD0\xCF\x03" +
		"\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD3\x07" +
		"\f\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD5\b\x1B\x06\x02\xD5\xD6\b\x1B" +
		"\x07\x02\xD68\x03\x02\x02\x02\xD7\xDB\x05\x05\x02\x02\xD8\xDB\x05\x07" +
		"\x03\x02\xD9\xDB\x07a\x02\x02\xDA\xD7\x03\x02\x02\x02\xDA\xD8\x03\x02" +
		"\x02\x02\xDA\xD9\x03\x02\x02\x02\xDB\xE1\x03\x02\x02\x02\xDC\xE0\x05\x05" +
		"\x02\x02\xDD\xE0\x05\x07\x03\x02\xDE\xE0\t\x14\x02\x02\xDF\xDC\x03\x02" +
		"\x02\x02\xDF\xDD\x03\x02\x02\x02\xDF\xDE\x03\x02\x02\x02\xE0\xE3\x03\x02" +
		"\x02\x02\xE1\xDF\x03\x02\x02\x02\xE1\xE2\x03\x02\x02\x02\xE2:\x03\x02" +
		"\x02\x02\xE3\xE1\x03\x02\x02\x02\xE4\xE5\x070\x02\x02\xE5<\x03\x02\x02" +
		"\x02\xE6\xE7\x07*\x02\x02\xE7>\x03\x02\x02\x02\xE8\xE9\x07+\x02\x02\xE9" +
		"@\x03\x02\x02\x02\xEA\xEB\x07.\x02\x02\xEBB\x03\x02\x02\x02\xEC\xED\t" +
		"\x15\x02\x02\xEDD\x03\x02\x02\x02\xEE\xF0\x05\t\x04\x02\xEF\xEE\x03\x02" +
		"\x02\x02\xF0\xF1\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF1\xF2\x03\x02" +
		"\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3\xF4\x06\"\x02\x02\xF4\xF5\x03\x02" +
		"\x02\x02\xF5\xF6\b\"\x02\x02\xF6F\x03\x02\x02\x02\xF7\xF9\x05\t\x04\x02" +
		"\xF8\xF7\x03\x02\x02\x02\xF9\xFA\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02" +
		"\xFA\xFB\x03\x02\x02\x02\xFB\xFC\x03\x02\x02\x02\xFC\xFD\b#\b\x02\xFD" +
		"H\x03\x02\x02\x02\xFE\u0100\x07\x0F\x02\x02\xFF\xFE\x03\x02\x02\x02\xFF" +
		"\u0100\x03\x02\x02\x02\u0100\u0101\x03\x02\x02\x02\u0101\u0102\x07\f\x02" +
		"\x02\u0102\u0103\b$\t\x02\u0103\u0104\x03\x02\x02\x02\u0104\u0105\b$\x06" +
		"\x02\u0105\u0106\b$\x07\x02\u0106J\x03\x02\x02\x02\u0107\u0108\x05\x17" +
		"\v\x02\u0108\u010C\x05\x13\t\x02\u0109\u010B\x05\t\x04\x02\u010A\u0109" +
		"\x03\x02\x02\x02\u010B\u010E\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02" +
		"\u010C\u010D\x03\x02\x02\x02\u010D\u010F\x03\x02\x02\x02\u010E\u010C\x03" +
		"\x02\x02\x02\u010F\u0110\x07<\x02\x02\u0110\u0111\x06%\x03\x02\u0111\u0112" +
		"\b%\n\x02\u0112L\x03\x02\x02\x02\u0113\u0114\x05\x11\b\x02\u0114\u0115" +
		"\x05\x19\f\x02\u0115\u0116\x05\x1B\r\x02\u0116\u0117\x05\x11\b\x02\u0117" +
		"\u0118\x05\x17\v\x02\u0118\u011C\x05\x13\t\x02\u0119\u011B\x05\t\x04\x02" +
		"\u011A\u0119\x03\x02\x02\x02\u011B\u011E\x03\x02\x02\x02\u011C\u011A\x03" +
		"\x02\x02\x02\u011C\u011D\x03\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E" +
		"\u011C\x03\x02\x02\x02\u011F\u0120\x07<\x02\x02\u0120\u0121\x06&\x04\x02" +
		"\u0121\u0122\b&\v\x02\u0122N\x03\x02\x02\x02\u0123\u0124\x05\x11\b\x02" +
		"\u0124\u0125\x05\x19\f\x02\u0125\u0126\x05\x1B\r\x02\u0126\u012A\x05\x11" +
		"\b\x02\u0127\u0129\x05\t\x04\x02\u0128\u0127\x03\x02\x02\x02\u0129\u012C" +
		"\x03\x02\x02\x02\u012A\u0128\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02" +
		"\u012B\u012D\x03\x02\x02\x02\u012C\u012A\x03\x02\x02\x02\u012D\u012E\x07" +
		"<\x02\x02\u012E\u012F\x06\'\x05\x02\u012F\u0130\b\'\f\x02\u0130P\x03\x02" +
		"\x02\x02\u0131\u0132\x05\x1B\r\x02\u0132\u0133\x05!\x10\x02\u0133\u0134" +
		"\x05\x17\v\x02\u0134\u0135\x05\x1D\x0E\x02\u0135\u0136\x05\r\x06\x02\u0136" +
		"\u013A\x05\x15\n\x02\u0137\u0139\x05\t\x04\x02\u0138\u0137\x03\x02\x02" +
		"\x02\u0139\u013C\x03\x02\x02\x02\u013A\u0138\x03\x02\x02\x02\u013A\u013B" +
		"\x03\x02\x02\x02\u013B\u013D\x03\x02\x02\x02\u013C\u013A\x03\x02\x02\x02" +
		"\u013D\u013E\x07<\x02\x02\u013E\u013F\x06(\x06\x02\u013F\u0140\b(\r\x02" +
		"\u0140R\x03\x02\x02\x02\u0141\u0142\x05\r\x06\x02\u0142\u0143\x05\v\x05" +
		"\x02\u0143\u0144\x05\x1B\r\x02\u0144\u0148\x05\x11\b\x02\u0145\u0147\x05" +
		"\t\x04\x02\u0146\u0145\x03\x02\x02\x02\u0147\u014A\x03\x02\x02\x02\u0148" +
		"\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u014B\x03\x02" +
		"\x02\x02\u014A\u0148\x03\x02\x02\x02\u014B\u014C\x07<\x02\x02\u014C\u014D" +
		"\x06)\x07\x02\u014D\u014E\b)\x0E\x02\u014ET\x03\x02\x02\x02\u014F\u0150" +
		"\x05\x0F\x07\x02\u0150\u0151\x05\x11\b\x02\u0151\u0152\x05\x13\t\x02\u0152" +
		"\u0153\x05\v\x05\x02\u0153\u0154\x05\x1F\x0F\x02\u0154\u0155\x05\x19\f" +
		"\x02\u0155\u0159\x05\x1D\x0E\x02\u0156\u0158\x05\t\x04\x02\u0157\u0156" +
		"\x03\x02\x02\x02\u0158\u015B\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02" +
		"\u0159\u015A\x03\x02\x02\x02\u015A\u015C\x03\x02\x02\x02\u015B\u0159\x03" +
		"\x02\x02\x02\u015C\u015D\x07<\x02\x02\u015D\u015E\x06*\b\x02\u015E\u015F" +
		"\b*\x0F\x02\u015FV\x03\x02\x02\x02\u0160\u0161\x07b\x02\x02\u0161\u0162" +
		"\x07b\x02\x02\u0162\u0163\x07b\x02\x02\u0163\u0167\x03\x02\x02\x02\u0164" +
		"\u0166\v\x02\x02\x02\u0165\u0164\x03\x02\x02\x02\u0166\u0169\x03\x02\x02" +
		"\x02\u0167\u0168\x03\x02\x02\x02\u0167\u0165\x03\x02\x02\x02\u0168\u016A" +
		"\x03\x02\x02\x02\u0169\u0167\x03\x02\x02\x02\u016A\u016B\x07b\x02\x02" +
		"\u016B\u016C\x07b\x02\x02\u016C\u016D\x07b\x02\x02\u016D\u016E\x03\x02" +
		"\x02\x02\u016E\u016F\b+\x10\x02\u016FX\x03\x02\x02\x02\u0170\u0171\x07" +
		"^\x02\x02\u0171\u017A\x07}\x02\x02\u0172\u0173\x07^\x02\x02\u0173\u017A" +
		"\x07]\x02\x02\u0174\u0175\x07^\x02\x02\u0175\u017A\x07^\x02\x02\u0176" +
		"\u0177\x07^\x02\x02\u0177\u0178\t\x16\x02\x02\u0178\u017A\b,\x11\x02\u0179" +
		"\u0170\x03\x02\x02\x02\u0179\u0172\x03\x02\x02\x02\u0179\u0174\x03\x02" +
		"\x02\x02\u0179\u0176\x03\x02\x02\x02\u017AZ\x03\x02\x02\x02\u017B\u017D" +
		"\x07^\x02\x02\u017C\u017E\n\x13\x02\x02\u017D\u017C\x03\x02\x02\x02\u017D" +
		"\u017E\x03\x02\x02\x02\u017E\\\x03\x02\x02\x02\u017F\u0181\x07B\x02\x02" +
		"\u0180\u017F\x03\x02\x02\x02\u0180\u0181\x03\x02\x02\x02\u0181\u0182\x03" +
		"\x02\x02\x02\u0182\u0187\x07}\x02\x02\u0183\u0186\n\x17\x02\x02\u0184" +
		"\u0186\x05#\x11\x02\u0185\u0183\x03\x02\x02\x02\u0185\u0184\x03\x02\x02" +
		"\x02\u0186\u0189\x03\x02\x02\x02\u0187\u0185\x03\x02\x02\x02\u0187\u0188" +
		"\x03\x02\x02\x02\u0188\u018A\x03\x02\x02\x02\u0189\u0187\x03\x02\x02\x02" +
		"\u018A\u018B\x07\x7F\x02\x02\u018B\u018C\b.\x12\x02\u018C^\x03\x02\x02" +
		"\x02\u018D\u0192\x07]\x02\x02\u018E\u0191\n\x18\x02\x02\u018F\u0191\x05" +
		"_/\x02\u0190\u018E\x03\x02\x02\x02\u0190\u018F\x03\x02\x02\x02\u0191\u0194" +
		"\x03\x02\x02\x02\u0192\u0190\x03\x02\x02\x02\u0192\u0193\x03\x02\x02\x02" +
		"\u0193\u0195\x03\x02\x02\x02\u0194\u0192\x03\x02\x02\x02\u0195\u0196\x07" +
		"_\x02\x02\u0196\u0197\b/\x13\x02\u0197`\x03\x02\x02\x02\u0198\u0199\t" +
		"\x19\x02\x02\u0199\u019A\b0\x14\x02\u019Ab\x03\x02\x02\x02\u019B\u019D" +
		"\n\x1A\x02\x02\u019C\u019B\x03\x02\x02\x02\u019D\u019E\x03\x02\x02\x02" +
		"\u019E\u019C\x03\x02\x02\x02\u019E\u019F\x03\x02\x02\x02\u019F\u01A0\x03" +
		"\x02\x02\x02\u01A0\u01A1\b1\x15\x02\u01A1d\x03\x02\x02\x02$\x02\x03\x04" +
		"\x87\x8F\x93\x99\xA0\xA5\xB8\xC1\xCB\xD0\xDA\xDF\xE1\xF1\xFA\xFF\u010C" +
		"\u011C\u012A\u013A\u0148\u0159\u0167\u0179\u017D\u0180\u0185\u0187\u0190" +
		"\u0192\u019E\x16\b\x02\x02\x07\x03\x02\x03\x16\x02\x07\x04\x02\t\x05\x02" +
		"\x06\x02\x02\t\x04\x02\x03$\x03\x03%\x04\x03&\x05\x03\'\x06\x03(\x07\x03" +
		")\b\x03*\t\x03+\n\x03,\v\x03.\f\x03/\r\x030\x0E\x031\x0F";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

