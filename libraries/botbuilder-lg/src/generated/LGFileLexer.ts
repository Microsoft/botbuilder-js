// Generated from ../LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 6;
	public static readonly WS_IN_NAME = 7;
	public static readonly IDENTIFIER = 8;
	public static readonly DOT = 9;
	public static readonly OPEN_PARENTHESIS = 10;
	public static readonly CLOSE_PARENTHESIS = 11;
	public static readonly COMMA = 12;
	public static readonly INVALID_SEPERATE_CHAR = 13;
	public static readonly WS_IN_BODY_IGNORED = 14;
	public static readonly IF = 15;
	public static readonly ELSEIF = 16;
	public static readonly ELSE = 17;
	public static readonly MULTI_LINE_TEXT = 18;
	public static readonly ESCAPE_CHARACTER = 19;
	public static readonly INVALID_ESCAPE = 20;
	public static readonly EXPRESSION = 21;
	public static readonly TEMPLATE_REF = 22;
	public static readonly TEXT_SEPARATOR = 23;
	public static readonly TEXT = 24;
	public static readonly SWITCH = 25;
	public static readonly CASE = 26;
	public static readonly DEFAULT = 27;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "WHITESPACE", "COMMENTS", "WS", "NEWLINE", "HASH", 
		"DASH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", "NEWLINE_IN_NAME", 
		"IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "COMMA", 
		"INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "NEWLINE_IN_BODY", 
		"IF", "ELSEIF", "ELSE", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", 
		"EXPRESSION", "TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT", "SWITCH", "CASE", 
		"DEFAULT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, undefined, 
		undefined, undefined, "'.'", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "INVALID_TOKEN_DEFAULT_MODE", 
		"WS_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "INVALID_SEPERATE_CHAR", "WS_IN_BODY_IGNORED", "IF", "ELSEIF", 
		"ELSE", "MULTI_LINE_TEXT", "ESCAPE_CHARACTER", "INVALID_ESCAPE", "EXPRESSION", 
		"TEMPLATE_REF", "TEXT_SEPARATOR", "TEXT", "SWITCH", "CASE", "DEFAULT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectConditions = false;        // whether we are expecting IF/ELSEIF/ELSE


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 7:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 19:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 20:
			this.IF_action(_localctx, actionIndex);
			break;

		case 21:
			this.ELSEIF_action(_localctx, actionIndex);
			break;

		case 22:
			this.ELSE_action(_localctx, actionIndex);
			break;

		case 23:
			this.MULTI_LINE_TEXT_action(_localctx, actionIndex);
			break;

		case 24:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 26:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 27:
			this.TEMPLATE_REF_action(_localctx, actionIndex);
			break;

		case 28:
			this.TEXT_SEPARATOR_action(_localctx, actionIndex);
			break;

		case 29:
			this.TEXT_action(_localctx, actionIndex);
			break;

		case 30:
			this.SWITCH_action(_localctx, actionIndex);
			break;

		case 31:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 32:
			this.DEFAULT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectConditions = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private IF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSEIF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = true;
			break;
		}
	}
	private MULTI_LINE_TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private TEMPLATE_REF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private TEXT_SEPARATOR_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 10:
			 this.ignoreWS = false; this.expectConditions = false;
			break;
		}
	}
	private SWITCH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 11:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 12:
			this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 13:
			this.ignoreWS = true;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 17:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 20:
			return this.IF_sempred(_localctx, predIndex);

		case 21:
			return this.ELSEIF_sempred(_localctx, predIndex);

		case 22:
			return this.ELSE_sempred(_localctx, predIndex);

		case 30:
			return this.SWITCH_sempred(_localctx, predIndex);

		case 31:
			return this.CASE_sempred(_localctx, predIndex);

		case 32:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private IF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectConditions;
		}
		return true;
	}
	private ELSEIF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectConditions;
		}
		return true;
	}
	private ELSE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.expectConditions;
		}
		return true;
	}
	private SWITCH_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.expectConditions;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return this.expectConditions;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.expectConditions;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1D\u016D\b\x01" +
		"\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04" +
		"\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f" +
		"\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11" +
		"\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16" +
		"\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B" +
		"\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!" +
		"\t!\x04\"\t\"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05" +
		"\x03\x05\x06\x05P\n\x05\r\x05\x0E\x05Q\x03\x05\x03\x05\x03\x06\x06\x06" +
		"W\n\x06\r\x06\x0E\x06X\x03\x06\x03\x06\x03\x07\x05\x07^\n\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x06\vp\n\v\r\v\x0E\vq\x03\v\x03\v\x03\f\x05" +
		"\fw\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x05\r\x81\n\r" +
		"\x03\r\x03\r\x03\r\x07\r\x86\n\r\f\r\x0E\r\x89\v\r\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x06" +
		"\x13\x96\n\x13\r\x13\x0E\x13\x97\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14" +
		"\x06\x14\x9F\n\x14\r\x14\x0E\x14\xA0\x03\x14\x03\x14\x03\x15\x05\x15\xA6" +
		"\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x05\x16\xB2\n\x16\x03\x16\x07\x16\xB5\n\x16\f\x16\x0E" +
		"\x16\xB8\v\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x05\x17\xCA\n\x17\x03\x17\x07\x17\xCD\n\x17\f\x17\x0E\x17\xD0\v\x17\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x05\x18\xDE\n\x18\x03\x18\x07\x18\xE1\n\x18\f\x18" +
		"\x0E\x18\xE4\v\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x07\x19\xEF\n\x19\f\x19\x0E\x19\xF2\v\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0103\n\x1A\x03\x1B\x03" +
		"\x1B\x05\x1B\u0107\n\x1B\x03\x1C\x03\x1C\x07\x1C\u010B\n\x1C\f\x1C\x0E" +
		"\x1C\u010E\v\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x07\x1D" +
		"\u0116\n\x1D\f\x1D\x0E\x1D\u0119\v\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1F\x06\x1F\u0122\n\x1F\r\x1F\x0E\x1F\u0123\x03\x1F" +
		"\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05" +
		" \u0134\n \x03 \x07 \u0137\n \f \x0E \u013A\v \x03 \x03 \x03 \x03 \x03" +
		"!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x05!\u0148\n!\x03!\x07!\u014B\n!" +
		"\f!\x0E!\u014E\v!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u0162\n\"\x03" +
		"\"\x07\"\u0165\n\"\f\"\x0E\"\u0168\v\"\x03\"\x03\"\x03\"\x03\"\x03\xF0" +
		"\x02\x02#\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02\x03\r\x02\x04\x0F\x02" +
		"\x05\x11\x02\x06\x13\x02\x07\x15\x02\b\x17\x02\t\x19\x02\x02\x1B\x02\n" +
		"\x1D\x02\v\x1F\x02\f!\x02\r#\x02\x0E%\x02\x0F\'\x02\x10)\x02\x02+\x02" +
		"\x02-\x02\x11/\x02\x121\x02\x133\x02\x145\x02\x157\x02\x169\x02\x17;\x02" +
		"\x18=\x02\x19?\x02\x1AA\x02\x1BC\x02\x1CE\x02\x1D\x05\x02\x03\x04\r\x04" +
		"\x02C\\c|\x06\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x04\x02&&@@\x04\x02\f\f" +
		"\x0F\x0F\x04\x02//aa\x03\x02==\x07\x02__ppttvv\x7F\x7F\x06\x02\f\f\x0F" +
		"\x0F}}\x7F\x7F\x05\x02\f\f\x0F\x0F__\n\x02\v\f\x0F\x0F\"\"*+]]__}}\x7F" +
		"\x7F\t\x02\v\f\x0F\x0F\"\"*+]_}}\x7F\x7F\u0189\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x03\x17\x03\x02\x02\x02\x03" +
		"\x19\x03\x02\x02\x02\x03\x1B\x03\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x03" +
		"\x1F\x03\x02\x02\x02\x03!\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x03%\x03" +
		"\x02\x02\x02\x04\'\x03\x02\x02\x02\x04)\x03\x02\x02\x02\x04+\x03\x02\x02" +
		"\x02\x04-\x03\x02\x02\x02\x04/\x03\x02\x02\x02\x041\x03\x02\x02\x02\x04" +
		"3\x03\x02\x02\x02\x045\x03\x02\x02\x02\x047\x03\x02\x02\x02\x049\x03\x02" +
		"\x02\x02\x04;\x03\x02\x02\x02\x04=\x03\x02\x02\x02\x04?\x03\x02\x02\x02" +
		"\x04A\x03\x02\x02\x02\x04C\x03\x02\x02\x02\x04E\x03\x02\x02\x02\x05G\x03" +
		"\x02\x02\x02\x07I\x03\x02\x02\x02\tK\x03\x02\x02\x02\vM\x03\x02\x02\x02" +
		"\rV\x03\x02\x02\x02\x0F]\x03\x02\x02\x02\x11c\x03\x02\x02\x02\x13g\x03" +
		"\x02\x02\x02\x15l\x03\x02\x02\x02\x17o\x03\x02\x02\x02\x19v\x03\x02\x02" +
		"\x02\x1B\x80\x03\x02\x02\x02\x1D\x8A\x03\x02\x02\x02\x1F\x8C\x03\x02\x02" +
		"\x02!\x8E\x03\x02\x02\x02#\x90\x03\x02\x02\x02%\x92\x03\x02\x02\x02\'" +
		"\x95\x03\x02\x02\x02)\x9E\x03\x02\x02\x02+\xA5\x03\x02\x02\x02-\xB1\x03" +
		"\x02\x02\x02/\xC9\x03\x02\x02\x021\xDD\x03\x02\x02\x023\xE9\x03\x02\x02" +
		"\x025\u0102\x03\x02\x02\x027\u0104\x03\x02\x02\x029\u0108\x03\x02\x02" +
		"\x02;\u0112\x03\x02\x02\x02=\u011D\x03\x02\x02\x02?\u0121\x03\x02\x02" +
		"\x02A\u0133\x03\x02\x02\x02C\u0147\x03\x02\x02\x02E\u0161\x03\x02\x02" +
		"\x02GH\t\x02\x02\x02H\x06\x03\x02\x02\x02IJ\x042;\x02J\b\x03\x02\x02\x02" +
		"KL\t\x03\x02\x02L\n\x03\x02\x02\x02MO\t\x04\x02\x02NP\n\x05\x02\x02ON" +
		"\x03\x02\x02\x02PQ\x03\x02\x02\x02QO\x03\x02\x02\x02QR\x03\x02\x02\x02" +
		"RS\x03\x02\x02\x02ST\b\x05\x02\x02T\f\x03\x02\x02\x02UW\x05\t\x04\x02" +
		"VU\x03\x02\x02\x02WX\x03\x02\x02\x02XV\x03\x02\x02\x02XY\x03\x02\x02\x02" +
		"YZ\x03\x02\x02\x02Z[\b\x06\x02\x02[\x0E\x03\x02\x02\x02\\^\x07\x0F\x02" +
		"\x02]\\\x03\x02\x02\x02]^\x03\x02\x02\x02^_\x03\x02\x02\x02_`\x07\f\x02" +
		"\x02`a\x03\x02\x02\x02ab\b\x07\x02\x02b\x10\x03\x02\x02\x02cd\x07%\x02" +
		"\x02de\x03\x02\x02\x02ef\b\b\x03\x02f\x12\x03\x02\x02\x02gh\x07/\x02\x02" +
		"hi\b\t\x04\x02ij\x03\x02\x02\x02jk\b\t\x05\x02k\x14\x03\x02\x02\x02lm" +
		"\v\x02\x02\x02m\x16\x03\x02\x02\x02np\x05\t\x04\x02on\x03\x02\x02\x02" +
		"pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02" +
		"st\b\v\x02\x02t\x18\x03\x02\x02\x02uw\x07\x0F\x02\x02vu\x03\x02\x02\x02" +
		"vw\x03\x02\x02\x02wx\x03\x02\x02\x02xy\x07\f\x02\x02yz\x03\x02\x02\x02" +
		"z{\b\f\x06\x02{|\b\f\x07\x02|\x1A\x03\x02\x02\x02}\x81\x05\x05\x02\x02" +
		"~\x81\x05\x07\x03\x02\x7F\x81\x07a\x02\x02\x80}\x03\x02\x02\x02\x80~\x03" +
		"\x02\x02\x02\x80\x7F\x03\x02\x02\x02\x81\x87\x03\x02\x02\x02\x82\x86\x05" +
		"\x05\x02\x02\x83\x86\x05\x07\x03\x02\x84\x86\t\x06\x02\x02\x85\x82\x03" +
		"\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x84\x03\x02\x02\x02\x86\x89\x03" +
		"\x02\x02\x02\x87\x85\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x1C\x03" +
		"\x02\x02\x02\x89\x87\x03\x02\x02\x02\x8A\x8B\x070\x02\x02\x8B\x1E\x03" +
		"\x02\x02\x02\x8C\x8D\x07*\x02\x02\x8D \x03\x02\x02\x02\x8E\x8F\x07+\x02" +
		"\x02\x8F\"\x03\x02\x02\x02\x90\x91\x07.\x02\x02\x91$\x03\x02\x02\x02\x92" +
		"\x93\t\x07\x02\x02\x93&\x03\x02\x02\x02\x94\x96\x05\t\x04\x02\x95\x94" +
		"\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98" +
		"\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99\x9A\x06\x13\x02\x02\x9A\x9B" +
		"\x03\x02\x02\x02\x9B\x9C\b\x13\x02\x02\x9C(\x03\x02\x02\x02\x9D\x9F\x05" +
		"\t\x04\x02\x9E\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0\x9E\x03" +
		"\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA3\b" +
		"\x14\b\x02\xA3*\x03\x02\x02\x02\xA4\xA6\x07\x0F\x02\x02\xA5\xA4\x03\x02" +
		"\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA8\x07\f" +
		"\x02\x02\xA8\xA9\b\x15\t\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAB\b\x15\x06" +
		"\x02\xAB\xAC\b\x15\x07\x02\xAC,\x03\x02\x02\x02\xAD\xAE\x07k\x02\x02\xAE" +
		"\xB2\x07h\x02\x02\xAF\xB0\x07K\x02\x02\xB0\xB2\x07H\x02\x02\xB1\xAD\x03" +
		"\x02\x02\x02\xB1\xAF\x03\x02\x02\x02\xB2\xB6\x03\x02\x02\x02\xB3\xB5\x05" +
		"\t\x04\x02\xB4\xB3\x03\x02\x02\x02\xB5\xB8\x03\x02\x02\x02\xB6\xB4\x03" +
		"\x02\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xB9\x03\x02\x02\x02\xB8\xB6\x03" +
		"\x02\x02\x02\xB9\xBA\x07<\x02\x02\xBA\xBB\x06\x16\x03\x02\xBB\xBC\b\x16" +
		"\n\x02\xBC.\x03\x02\x02\x02\xBD\xBE\x07g\x02\x02\xBE\xBF\x07n\x02\x02" +
		"\xBF\xC0\x07u\x02\x02\xC0\xC1\x07g\x02\x02\xC1\xC2\x07k\x02\x02\xC2\xCA" +
		"\x07h\x02\x02\xC3\xC4\x07G\x02\x02\xC4\xC5\x07N\x02\x02\xC5\xC6\x07U\x02" +
		"\x02\xC6\xC7\x07G\x02\x02\xC7\xC8\x07K\x02\x02\xC8\xCA\x07H\x02\x02\xC9" +
		"\xBD\x03\x02\x02\x02\xC9\xC3\x03\x02\x02\x02\xCA\xCE\x03\x02\x02\x02\xCB" +
		"\xCD\x05\t\x04\x02\xCC\xCB\x03\x02\x02\x02\xCD\xD0\x03\x02\x02\x02\xCE" +
		"\xCC\x03\x02\x02\x02\xCE\xCF\x03\x02\x02\x02\xCF\xD1\x03\x02\x02\x02\xD0" +
		"\xCE\x03\x02\x02\x02\xD1\xD2\x07<\x02\x02\xD2\xD3\x06\x17\x04\x02\xD3" +
		"\xD4\b\x17\v\x02\xD40\x03\x02\x02\x02\xD5\xD6\x07g\x02\x02\xD6\xD7\x07" +
		"n\x02\x02\xD7\xD8\x07u\x02\x02\xD8\xDE\x07g\x02\x02\xD9\xDA\x07G\x02\x02" +
		"\xDA\xDB\x07N\x02\x02\xDB\xDC\x07U\x02\x02\xDC\xDE\x07G\x02\x02\xDD\xD5" +
		"\x03\x02\x02\x02\xDD\xD9\x03\x02\x02\x02\xDE\xE2\x03\x02\x02\x02\xDF\xE1" +
		"\x05\t\x04\x02\xE0\xDF\x03\x02\x02\x02\xE1\xE4\x03\x02\x02\x02\xE2\xE0" +
		"\x03\x02\x02\x02\xE2\xE3\x03\x02\x02\x02\xE3\xE5\x03\x02\x02\x02\xE4\xE2" +
		"\x03\x02\x02\x02\xE5\xE6\x07<\x02\x02\xE6\xE7\x06\x18\x05\x02\xE7\xE8" +
		"\b\x18\f\x02\xE82\x03\x02\x02\x02\xE9\xEA\x07b\x02\x02\xEA\xEB\x07b\x02" +
		"\x02\xEB\xEC\x07b\x02\x02\xEC\xF0\x03\x02\x02\x02\xED\xEF\v\x02\x02\x02" +
		"\xEE\xED\x03\x02\x02\x02\xEF\xF2\x03\x02\x02\x02\xF0\xF1\x03\x02\x02\x02" +
		"\xF0\xEE\x03\x02\x02\x02\xF1\xF3\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02" +
		"\xF3\xF4\x07b\x02\x02\xF4\xF5\x07b\x02\x02\xF5\xF6\x07b\x02\x02\xF6\xF7" +
		"\x03\x02\x02\x02\xF7\xF8\b\x19\r\x02\xF84\x03\x02\x02\x02\xF9\xFA\x07" +
		"^\x02\x02\xFA\u0103\x07}\x02\x02\xFB\xFC\x07^\x02\x02\xFC\u0103\x07]\x02" +
		"\x02\xFD\xFE\x07^\x02\x02\xFE\u0103\x07^\x02\x02\xFF\u0100\x07^\x02\x02" +
		"\u0100\u0101\t\b\x02\x02\u0101\u0103\b\x1A\x0E\x02\u0102\xF9\x03\x02\x02" +
		"\x02\u0102\xFB\x03\x02\x02\x02\u0102\xFD\x03\x02\x02\x02\u0102\xFF\x03" +
		"\x02\x02\x02\u01036\x03\x02\x02\x02\u0104\u0106\x07^\x02\x02\u0105\u0107" +
		"\n\x05\x02\x02\u0106\u0105\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02" +
		"\u01078\x03\x02\x02\x02\u0108\u010C\x07}\x02\x02\u0109\u010B\n\t\x02\x02" +
		"\u010A\u0109\x03\x02\x02\x02\u010B\u010E\x03\x02\x02\x02\u010C\u010A\x03" +
		"\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010F\x03\x02\x02\x02\u010E" +
		"\u010C\x03\x02\x02\x02\u010F\u0110\x07\x7F\x02\x02\u0110\u0111\b\x1C\x0F" +
		"\x02\u0111:\x03\x02\x02\x02\u0112\u0117\x07]\x02\x02\u0113\u0116\n\n\x02" +
		"\x02\u0114\u0116\x05;\x1D\x02\u0115\u0113\x03\x02\x02\x02\u0115\u0114" +
		"\x03\x02\x02\x02\u0116\u0119\x03\x02\x02\x02\u0117\u0115\x03\x02\x02\x02" +
		"\u0117\u0118\x03\x02\x02\x02\u0118\u011A\x03\x02\x02\x02\u0119\u0117\x03" +
		"\x02\x02\x02\u011A\u011B\x07_\x02\x02\u011B\u011C\b\x1D\x10\x02\u011C" +
		"<\x03\x02\x02\x02\u011D\u011E\t\v\x02\x02\u011E\u011F\b\x1E\x11\x02\u011F" +
		">\x03\x02\x02\x02\u0120\u0122\n\f\x02\x02\u0121\u0120\x03\x02\x02\x02" +
		"\u0122\u0123\x03\x02\x02\x02\u0123\u0121\x03\x02\x02\x02\u0123\u0124\x03" +
		"\x02\x02\x02\u0124\u0125\x03\x02\x02\x02\u0125\u0126\b\x1F\x12\x02\u0126" +
		"@\x03\x02\x02\x02\u0127\u0128\x07u\x02\x02\u0128\u0129\x07y\x02\x02\u0129" +
		"\u012A\x07k\x02\x02\u012A\u012B\x07v\x02\x02\u012B\u012C\x07e\x02\x02" +
		"\u012C\u0134\x07j\x02\x02\u012D\u012E\x07U\x02\x02\u012E\u012F\x07Y\x02" +
		"\x02\u012F\u0130\x07K\x02\x02\u0130\u0131\x07V\x02\x02\u0131\u0132\x07" +
		"E\x02\x02\u0132\u0134\x07J\x02\x02\u0133\u0127\x03\x02\x02\x02\u0133\u012D" +
		"\x03\x02\x02\x02\u0134\u0138\x03\x02\x02\x02\u0135\u0137\x05\t\x04\x02" +
		"\u0136\u0135\x03\x02\x02\x02\u0137\u013A\x03\x02\x02\x02\u0138\u0136\x03" +
		"\x02\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139\u013B\x03\x02\x02\x02\u013A" +
		"\u0138\x03\x02\x02\x02\u013B\u013C\x07<\x02\x02\u013C\u013D\x06 \x06\x02" +
		"\u013D\u013E\b \x13\x02\u013EB\x03\x02\x02\x02\u013F\u0140\x07e\x02\x02" +
		"\u0140\u0141\x07c\x02\x02\u0141\u0142\x07u\x02\x02\u0142\u0148\x07g\x02" +
		"\x02\u0143\u0144\x07E\x02\x02\u0144\u0145\x07C\x02\x02\u0145\u0146\x07" +
		"U\x02\x02\u0146\u0148\x07G\x02\x02\u0147\u013F\x03\x02\x02\x02\u0147\u0143" +
		"\x03\x02\x02\x02\u0148\u014C\x03\x02\x02\x02\u0149\u014B\x05\t\x04\x02" +
		"\u014A\u0149\x03\x02\x02\x02\u014B\u014E\x03\x02\x02\x02\u014C\u014A\x03" +
		"\x02\x02\x02\u014C\u014D\x03\x02\x02\x02\u014D\u014F\x03\x02\x02\x02\u014E" +
		"\u014C\x03\x02\x02\x02\u014F\u0150\x07<\x02\x02\u0150\u0151\x06!\x07\x02" +
		"\u0151\u0152\b!\x14\x02\u0152D\x03\x02\x02\x02\u0153\u0154\x07f\x02\x02" +
		"\u0154\u0155\x07g\x02\x02\u0155\u0156\x07h\x02\x02\u0156\u0157\x07c\x02" +
		"\x02\u0157\u0158\x07w\x02\x02\u0158\u0159\x07n\x02\x02\u0159\u0162\x07" +
		"v\x02\x02\u015A\u015B\x07F\x02\x02\u015B\u015C\x07G\x02\x02\u015C\u015D" +
		"\x07H\x02\x02\u015D\u015E\x07C\x02\x02\u015E\u015F\x07W\x02\x02\u015F" +
		"\u0160\x07N\x02\x02\u0160\u0162\x07V\x02\x02\u0161\u0153\x03\x02\x02\x02" +
		"\u0161\u015A\x03\x02\x02\x02\u0162\u0166\x03\x02\x02\x02\u0163\u0165\x05" +
		"\t\x04\x02\u0164\u0163\x03\x02\x02\x02\u0165\u0168\x03\x02\x02\x02\u0166" +
		"\u0164\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0169\x03\x02" +
		"\x02\x02\u0168\u0166\x03\x02\x02\x02\u0169\u016A\x07<\x02\x02\u016A\u016B" +
		"\x06\"\b\x02\u016B\u016C\b\"\x15\x02\u016CF\x03\x02\x02\x02#\x02\x03\x04" +
		"QX]qv\x80\x85\x87\x97\xA0\xA5\xB1\xB6\xC9\xCE\xDD\xE2\xF0\u0102\u0106" +
		"\u010C\u0115\u0117\u0123\u0133\u0138\u0147\u014C\u0161\u0166\x16\b\x02" +
		"\x02\x07\x03\x02\x03\t\x02\x07\x04\x02\t\x05\x02\x06\x02\x02\t\x04\x02" +
		"\x03\x15\x03\x03\x16\x04\x03\x17\x05\x03\x18\x06\x03\x19\x07\x03\x1A\b" +
		"\x03\x1C\t\x03\x1D\n\x03\x1E\v\x03\x1F\f\x03 \r\x03!\x0E\x03\"\x0F";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

