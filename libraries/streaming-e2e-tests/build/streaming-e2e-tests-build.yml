# Ensure BotFramework-Streaming library works in the browser 
# by running tests after deploying a streaming-enabled JS Echo Bot 
# and a React App that uses latest streaming bits in DLJS and WebChat.

name: $(Build.BuildId)
trigger: none
pr: none

pool:
  vmImage: 'windows-2019'

variables:
  RootReactPiecesDir: '$(System.DefaultWorkingDirectory)/libraries/streaming-e2e-tests/react-app'
  ReactProjectDir: '$(RootReactPiecesDir)/react-app'
  DLJSDir: '$(System.DefaultWorkingDirectory)/libraries/streaming-e2e-tests/react-app/BotFramework-DirectLineJS'
  BotBuilder: 'botbuilder'
  BfStreaming: 'botframework-streaming'
  TestsDir: '$(System.DefaultWorkingDirectory)/libraries/streaming-e2e-tests/tests'
  runCodesignValidationInjection: false
  # Variables defined in Azure:
  # BotName, ConnectedServiceNameARM, MyGetPersonalAccessToken, ReactAppService, ResourceGroup

stages:
  - stage: Prepare_Bot_And_React_App
    jobs:
      # - job: Deploy_Bot
      #   variables:
      #     TargetProjectDir: '$(System.DefaultWorkingDirectory)/libraries/streaming-e2e-tests/bot'
      #     PackageName: $(BotBuilder)
      #   steps:
      #     - template: configure-to-bbjs-daily.yml
      #     - template: deploy-bot.yml

      - job: Create_React_App
        variables:
          PackageName: 'botframework-streaming'
          TargetProjectDir: $(DLJSDir)
          REACT_APP_BOT_HOSTNAME: $(BotName)
        steps: 
          - template: create-react-app.yml
      
      # - job: Run_Tests
      # # TODO INCLUDE DEPLOY_BOT
      #   dependsOn: Create_React_App
      #   condition: succeeded()
      #   variables:
      #     PORT: 3000
      #   steps:
      #     - template: run-tests.yml

  # - stage: Run_Tests
  #   dependsOn: Prepare_Bot_And_React_App
  #   condition: succeeded()
  #   jobs:
  #     - template: run-tests.yml

  #### UNCOMMENT ABOVE TO RESTORE
          
      # - job: Prep_React_App
      #   variables:
      #     PackageName: 'botframework-streaming'
      #     TargetProjectDir: $(DLJSDir)
      #     REACT_APP_BOT_HOSTNAME: $(BotName)
      #   steps:
      #     # Create React App
      #     - powershell: ps
      #       displayName: 'ps before create-react-app.yml'
          
      #     - powershell: npx create-react-app react-app
      #       displayName: 'create-react-app'
      #       workingDirectory: $(RootReactPiecesDir)
          
      #     - powershell: Remove-Item src/App.js, src/index.js, public/index.html, ./package.json, ./yarn.lock
      #       displayName: "Delete files we're replacing with custom code in react-app"
      #       workingDirectory: $(ReactProjectDir)

      #     - powershell: |
      #         copy ../custom-app-code/App.js, ../custom-app-code/index.js ./src/
      #         copy ../custom-app-code/index.html ./public
      #         copy ../custom-app-code/package.json, ../custom-app-code/yarn.lock
      #       displayName: 'Copy custom files into react-app'
      #       workingDirectory: $(ReactProjectDir)
          
      #     # Install Dependencies
      #     - task: Cache@2
      #       displayName: Cache npm
      #       inputs:
      #         key: 'WebChatCache | npm | "$(Agent.OS)"'
      #         path: $(ReactProjectDir)/node_modules
      #         cacheHitVar: 'CacheRestored'

      #     - powershell: yarn add botframework-webchat@4.9.2
      #       displayName: 'yarn add botframework-webchat@4.9.2'
      #       condition: ne(variables.CacheRestored, 'true')
      #       workingDirectory: $(ReactProjectDir)
          
      #     - powershell: yarn add botframework-directlinejs
      #       displayName: 'yarn add botframework-directlinejs.tgz'
      #       workingDirectory: $(ReactProjectDir)
          
      #     - task: PublishPipelineArtifact@1
      #       displayName: 'Publish Artifact: CustomizedReactApp'
      #       inputs:
      #         targetPath: $(ReactProjectDir)
      #         artifactName: 'CustomizedReactApp'
          
      #     - powershell: ps
      #       displayName: 'ps end of create-react-app.yml'

      # - job: Run_Tests
      #   dependsOn: Prep_React_App
      #   condition: succeeded()
      #   variables:
      #     PORT: 3000
      #   steps:
      #     - powershell: npm install
      #       displayName: 'npm install tests'
      #       condition: ne(variables.CacheRestored, 'true')
      #       workingDirectory: $(TestsDir)
          
      #     - task: DownloadPipelineArtifact@2
      #       inputs:
      #         artifact: CustomizedReactApp
      #         path: $(ReactProjectDir)
          
      #     - powershell: start powershell {npx react-scripts start}
      #       displayName: 'npm start React App'
      #       workingDirectory: $(ReactProjectDir)
          
      #     - powershell: Start-Sleep -Seconds 60
      #       displayName: 'Sleeping for 60 seconds to allow React App to serve...'
          
      #     - powershell: npm test
      #       displayName: 'npm test'
      #       workingDirectory: $(TestsDir)
  