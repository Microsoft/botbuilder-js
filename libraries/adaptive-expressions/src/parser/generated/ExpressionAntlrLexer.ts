// Generated from ../ExpressionAntlrLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionAntlrLexer extends Lexer {
	public static readonly STRING_INTERPOLATION_START = 1;
	public static readonly PLUS = 2;
	public static readonly SUBSTRACT = 3;
	public static readonly NON = 4;
	public static readonly XOR = 5;
	public static readonly ASTERISK = 6;
	public static readonly SLASH = 7;
	public static readonly PERCENT = 8;
	public static readonly DOUBLE_EQUAL = 9;
	public static readonly NOT_EQUAL = 10;
	public static readonly SINGLE_AND = 11;
	public static readonly DOUBLE_AND = 12;
	public static readonly DOUBLE_VERTICAL_CYLINDER = 13;
	public static readonly LESS_THAN = 14;
	public static readonly MORE_THAN = 15;
	public static readonly LESS_OR_EQUAl = 16;
	public static readonly MORE_OR_EQUAL = 17;
	public static readonly OPEN_BRACKET = 18;
	public static readonly CLOSE_BRACKET = 19;
	public static readonly DOT = 20;
	public static readonly OPEN_SQUARE_BRACKET = 21;
	public static readonly CLOSE_SQUARE_BRACKET = 22;
	public static readonly OPEN_CURLY_BRACKET = 23;
	public static readonly CLOSE_CURLY_BRACKET = 24;
	public static readonly COMMA = 25;
	public static readonly COLON = 26;
	public static readonly DOLLAR = 27;
	public static readonly NUMBER = 28;
	public static readonly WHITESPACE = 29;
	public static readonly IDENTIFIER = 30;
	public static readonly NEWLINE = 31;
	public static readonly STRING = 32;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 33;
	public static readonly ESCAPE_CHARACTER = 34;
	public static readonly TEXT_CONTENT = 35;
	public static readonly STRING_INTERPOLATION_MODE = 1;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "STRING_INTERPOLATION_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "DIGIT", "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", 
		"NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", 
		"SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", 
		"LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", 
		"OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", 
		"COMMA", "COLON", "DOLLAR", "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", 
		"STRING", "INVALID_TOKEN_DEFAULT_MODE", "STRING_INTERPOLATION_END", "ESCAPE_CHARACTER", 
		"TEXT_CONTENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'", 
		"'=='", undefined, "'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='", 
		"'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "':'", "'$'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", 
		"ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "DOLLAR", "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", 
		"INVALID_TOKEN_DEFAULT_MODE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionAntlrLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;      // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ExpressionAntlrLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionAntlrLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionAntlrLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ExpressionAntlrLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 2:
			this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
			break;

		case 35:
			this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
			break;
		}
	}
	private STRING_INTERPOLATION_START_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.ignoreWS = false;
			break;
		}
	}
	private STRING_INTERPOLATION_END_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 30:
			return this.WHITESPACE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WHITESPACE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02%\xE4\b\x01\b" +
		"\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t" +
		"\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04" +
		"\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12" +
		"\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17" +
		"\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C" +
		"\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"" +
		"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x05\ro\n\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A" +
		"\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1F\x06\x1F\x98\n\x1F\r\x1F\x0E\x1F\x99\x03\x1F\x03\x1F\x06\x1F\x9E" +
		"\n\x1F\r\x1F\x0E\x1F\x9F\x05\x1F\xA2\n\x1F\x03 \x03 \x03 \x03 \x03 \x03" +
		"!\x03!\x03!\x03!\x03!\x05!\xAE\n!\x03!\x03!\x03!\x07!\xB3\n!\f!\x0E!\xB6" +
		"\v!\x03!\x05!\xB9\n!\x03\"\x05\"\xBC\n\"\x03\"\x03\"\x03\"\x03\"\x03#" +
		"\x03#\x07#\xC4\n#\f#\x0E#\xC7\v#\x03#\x03#\x03#\x07#\xCC\n#\f#\x0E#\xCF" +
		"\v#\x03#\x05#\xD2\n#\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03%\x03&\x03" +
		"&\x05&\xDE\n&\x03\'\x03\'\x03\'\x05\'\xE3\n\'\x02\x02\x02(\x04\x02\x02" +
		"\x06\x02\x02\b\x02\x03\n\x02\x04\f\x02\x05\x0E\x02\x06\x10\x02\x07\x12" +
		"\x02\b\x14\x02\t\x16\x02\n\x18\x02\v\x1A\x02\f\x1C\x02\r\x1E\x02\x0E " +
		"\x02\x0F\"\x02\x10$\x02\x11&\x02\x12(\x02\x13*\x02\x14,\x02\x15.\x02\x16" +
		"0\x02\x172\x02\x184\x02\x196\x02\x1A8\x02\x1B:\x02\x1C<\x02\x1D>\x02\x1E" +
		"@\x02\x1FB\x02 D\x02!F\x02\"H\x02#J\x02\x02L\x02$N\x02%\x04\x02\x03\n" +
		"\x04\x02C\\c|\x03\x022;\x06\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x05\x02%%" +
		"BBaa\x04\x02//aa\x03\x02))\x03\x02$$\x04\x02\f\f\x0F\x0F\xF1\x02\b\x03" +
		"\x02\x02\x02\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02" +
		"\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02" +
		"\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02" +
		"\x02\x02\x02\x1C\x03\x02\x02\x02\x02\x1E\x03\x02\x02\x02\x02 \x03\x02" +
		"\x02\x02\x02\"\x03\x02\x02\x02\x02$\x03\x02\x02\x02\x02&\x03\x02\x02\x02" +
		"\x02(\x03\x02\x02\x02\x02*\x03\x02\x02\x02\x02,\x03\x02\x02\x02\x02.\x03" +
		"\x02\x02\x02\x020\x03\x02\x02\x02\x022\x03\x02\x02\x02\x024\x03\x02\x02" +
		"\x02\x026\x03\x02\x02\x02\x028\x03\x02\x02\x02\x02:\x03\x02\x02\x02\x02" +
		"<\x03\x02\x02\x02\x02>\x03\x02\x02\x02\x02@\x03\x02\x02\x02\x02B\x03\x02" +
		"\x02\x02\x02D\x03\x02\x02\x02\x02F\x03\x02\x02\x02\x02H\x03\x02\x02\x02" +
		"\x03J\x03\x02\x02\x02\x03L\x03\x02\x02\x02\x03N\x03\x02\x02\x02\x04P\x03" +
		"\x02\x02\x02\x06R\x03\x02\x02\x02\bT\x03\x02\x02\x02\nY\x03\x02\x02\x02" +
		"\f[\x03\x02\x02\x02\x0E]\x03\x02\x02\x02\x10_\x03\x02\x02\x02\x12a\x03" +
		"\x02\x02\x02\x14c\x03\x02\x02\x02\x16e\x03\x02\x02\x02\x18g\x03\x02\x02" +
		"\x02\x1An\x03\x02\x02\x02\x1Cp\x03\x02\x02\x02\x1Er\x03\x02\x02\x02 u" +
		"\x03\x02\x02\x02\"x\x03\x02\x02\x02$z\x03\x02\x02\x02&|\x03\x02\x02\x02" +
		"(\x7F\x03\x02\x02\x02*\x82\x03\x02\x02\x02,\x84\x03\x02\x02\x02.\x86\x03" +
		"\x02\x02\x020\x88\x03\x02\x02\x022\x8A\x03\x02\x02\x024\x8C\x03\x02\x02" +
		"\x026\x8E\x03\x02\x02\x028\x90\x03\x02\x02\x02:\x92\x03\x02\x02\x02<\x94" +
		"\x03\x02\x02\x02>\x97\x03\x02\x02\x02@\xA3\x03\x02\x02\x02B\xAD\x03\x02" +
		"\x02\x02D\xBB\x03\x02\x02\x02F\xD1\x03\x02\x02\x02H\xD3\x03\x02\x02\x02" +
		"J\xD5\x03\x02\x02\x02L\xDB\x03\x02\x02\x02N\xE2\x03\x02\x02\x02PQ\t\x02" +
		"\x02\x02Q\x05\x03\x02\x02\x02RS\t\x03\x02\x02S\x07\x03\x02\x02\x02TU\x07" +
		"b\x02\x02UV\b\x04\x02\x02VW\x03\x02\x02\x02WX\b\x04\x03\x02X\t\x03\x02" +
		"\x02\x02YZ\x07-\x02\x02Z\v\x03\x02\x02\x02[\\\x07/\x02\x02\\\r\x03\x02" +
		"\x02\x02]^\x07#\x02\x02^\x0F\x03\x02\x02\x02_`\x07`\x02\x02`\x11\x03\x02" +
		"\x02\x02ab\x07,\x02\x02b\x13\x03\x02\x02\x02cd\x071\x02\x02d\x15\x03\x02" +
		"\x02\x02ef\x07\'\x02\x02f\x17\x03\x02\x02\x02gh\x07?\x02\x02hi\x07?\x02" +
		"\x02i\x19\x03\x02\x02\x02jk\x07#\x02\x02ko\x07?\x02\x02lm\x07>\x02\x02" +
		"mo\x07@\x02\x02nj\x03\x02\x02\x02nl\x03\x02\x02\x02o\x1B\x03\x02\x02\x02" +
		"pq\x07(\x02\x02q\x1D\x03\x02\x02\x02rs\x07(\x02\x02st\x07(\x02\x02t\x1F" +
		"\x03\x02\x02\x02uv\x07~\x02\x02vw\x07~\x02\x02w!\x03\x02\x02\x02xy\x07" +
		">\x02\x02y#\x03\x02\x02\x02z{\x07@\x02\x02{%\x03\x02\x02\x02|}\x07>\x02" +
		"\x02}~\x07?\x02\x02~\'\x03\x02\x02\x02\x7F\x80\x07@\x02\x02\x80\x81\x07" +
		"?\x02\x02\x81)\x03\x02\x02\x02\x82\x83\x07*\x02\x02\x83+\x03\x02\x02\x02" +
		"\x84\x85\x07+\x02\x02\x85-\x03\x02\x02\x02\x86\x87\x070\x02\x02\x87/\x03" +
		"\x02\x02\x02\x88\x89\x07]\x02\x02\x891\x03\x02\x02\x02\x8A\x8B\x07_\x02" +
		"\x02\x8B3\x03\x02\x02\x02\x8C\x8D\x07}\x02\x02\x8D5\x03\x02\x02\x02\x8E" +
		"\x8F\x07\x7F\x02\x02\x8F7\x03\x02\x02\x02\x90\x91\x07.\x02\x02\x919\x03" +
		"\x02\x02\x02\x92\x93\x07<\x02\x02\x93;\x03\x02\x02\x02\x94\x95\x07&\x02" +
		"\x02\x95=\x03\x02\x02\x02\x96\x98\x05\x06\x03\x02\x97\x96\x03\x02\x02" +
		"\x02\x98\x99\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02" +
		"\x02\x9A\xA1\x03\x02\x02\x02\x9B\x9D\x070\x02\x02\x9C\x9E\x05\x06\x03" +
		"\x02\x9D\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\x9D\x03\x02\x02" +
		"\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA2\x03\x02\x02\x02\xA1\x9B\x03\x02\x02" +
		"\x02\xA1\xA2\x03\x02\x02\x02\xA2?\x03\x02\x02\x02\xA3\xA4\t\x04\x02\x02" +
		"\xA4\xA5\x06 \x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b \x04\x02\xA7A" +
		"\x03\x02\x02\x02\xA8\xAE\x05\x04\x02\x02\xA9\xAE\t\x05\x02\x02\xAA\xAB" +
		"\x07B\x02\x02\xAB\xAE\x07B\x02\x02\xAC\xAE\x04&\'\x02\xAD\xA8\x03\x02" +
		"\x02\x02\xAD\xA9\x03\x02\x02\x02\xAD\xAA\x03\x02\x02\x02\xAD\xAC\x03\x02" +
		"\x02\x02\xAE\xB4\x03\x02\x02\x02\xAF\xB3\x05\x04\x02\x02\xB0\xB3\x05\x06" +
		"\x03\x02\xB1\xB3\t\x06\x02\x02\xB2\xAF\x03\x02\x02\x02\xB2\xB0\x03\x02" +
		"\x02\x02\xB2\xB1\x03\x02\x02\x02\xB3\xB6\x03\x02\x02\x02\xB4\xB2\x03\x02" +
		"\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB8\x03\x02\x02\x02\xB6\xB4\x03\x02" +
		"\x02\x02\xB7\xB9\x07#\x02\x02\xB8\xB7\x03\x02\x02\x02\xB8\xB9\x03\x02" +
		"\x02\x02\xB9C\x03\x02\x02\x02\xBA\xBC\x07\x0F\x02\x02\xBB\xBA\x03\x02" +
		"\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE\x07\f" +
		"\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF\xC0\b\"\x04\x02\xC0E\x03\x02\x02" +
		"\x02\xC1\xC5\x07)\x02\x02\xC2\xC4\n\x07\x02\x02\xC3\xC2\x03\x02\x02\x02" +
		"\xC4\xC7\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC5\xC6\x03\x02\x02\x02" +
		"\xC6\xC8\x03\x02\x02\x02\xC7\xC5\x03\x02\x02\x02\xC8\xD2\x07)\x02\x02" +
		"\xC9\xCD\x07$\x02\x02\xCA\xCC\n\b\x02\x02\xCB\xCA\x03\x02\x02\x02\xCC" +
		"\xCF\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE" +
		"\xD0\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xD0\xD2\x07$\x02\x02\xD1" +
		"\xC1\x03\x02\x02\x02\xD1\xC9\x03\x02\x02\x02\xD2G\x03\x02\x02\x02\xD3" +
		"\xD4\v\x02\x02\x02\xD4I\x03\x02\x02\x02\xD5\xD6\x07b\x02\x02\xD6\xD7\b" +
		"%\x05\x02\xD7\xD8\x03\x02\x02\x02\xD8\xD9\b%\x06\x02\xD9\xDA\b%\x07\x02" +
		"\xDAK\x03\x02\x02\x02\xDB\xDD\x07^\x02\x02\xDC\xDE\n\t\x02\x02\xDD\xDC" +
		"\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDEM\x03\x02\x02\x02\xDF\xE0" +
		"\x07^\x02\x02\xE0\xE3\x07b\x02\x02\xE1\xE3\n\t\x02\x02\xE2\xDF\x03\x02" +
		"\x02\x02\xE2\xE1\x03\x02\x02\x02\xE3O\x03\x02\x02\x02\x12\x02\x03n\x99" +
		"\x9F\xA1\xAD\xB2\xB4\xB8\xBB\xC5\xCD\xD1\xDD\xE2\b\x03\x04\x02\x07\x03" +
		"\x02\b\x02\x02\x03%\x03\t\x03\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionAntlrLexer.__ATN) {
			ExpressionAntlrLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
		}

		return ExpressionAntlrLexer.__ATN;
	}

}

