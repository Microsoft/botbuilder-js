// Generated from src/parser/ExpressionAntlrLexer.g4 by ANTLR 4.7.3-SNAPSHOT

/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionAntlrLexer extends Lexer {
	public static readonly STRING_INTERPOLATION_START = 1;
	public static readonly PLUS = 2;
	public static readonly SUBSTRACT = 3;
	public static readonly NON = 4;
	public static readonly XOR = 5;
	public static readonly ASTERISK = 6;
	public static readonly SLASH = 7;
	public static readonly PERCENT = 8;
	public static readonly DOUBLE_EQUAL = 9;
	public static readonly NOT_EQUAL = 10;
	public static readonly SINGLE_AND = 11;
	public static readonly DOUBLE_AND = 12;
	public static readonly DOUBLE_VERTICAL_CYLINDER = 13;
	public static readonly LESS_THAN = 14;
	public static readonly MORE_THAN = 15;
	public static readonly LESS_OR_EQUAl = 16;
	public static readonly MORE_OR_EQUAL = 17;
	public static readonly OPEN_BRACKET = 18;
	public static readonly CLOSE_BRACKET = 19;
	public static readonly DOT = 20;
	public static readonly OPEN_SQUARE_BRACKET = 21;
	public static readonly CLOSE_SQUARE_BRACKET = 22;
	public static readonly OPEN_CURLY_BRACKET = 23;
	public static readonly CLOSE_CURLY_BRACKET = 24;
	public static readonly COMMA = 25;
	public static readonly COLON = 26;
	public static readonly ARROW = 27;
	public static readonly NUMBER = 28;
	public static readonly WHITESPACE = 29;
	public static readonly IDENTIFIER = 30;
	public static readonly NEWLINE = 31;
	public static readonly STRING = 32;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 33;
	public static readonly EOL = 34;
	public static readonly TEMPLATE = 35;
	public static readonly ESCAPE_CHARACTER = 36;
	public static readonly TEXT_CONTENT = 37;
	public static readonly STRING_INTERPOLATION_MODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "STRING_INTERPOLATION_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "DIGIT", "OBJECT_DEFINITION", "STRING_INTERPOLATION_START", 
		"PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", 
		"NOT_EQUAL", "SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", 
		"MORE_THAN", "LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOT", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", 
		"CLOSE_CURLY_BRACKET", "COMMA", "COLON", "ARROW", "NUMBER", "WHITESPACE", 
		"IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "STRING_INTERPOLATION_END", 
		"EOL", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'", 
		"'=='", undefined, "'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='", 
		"'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "':'", "'=>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", 
		"ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "ARROW", "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", 
		"INVALID_TOKEN_DEFAULT_MODE", "EOL", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionAntlrLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;      // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ExpressionAntlrLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionAntlrLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionAntlrLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ExpressionAntlrLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ExpressionAntlrLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 3:
			this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
			break;

		case 36:
			this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
			break;
		}
	}
	private STRING_INTERPOLATION_START_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			 this.ignoreWS = false;
			break;
		}
	}
	private STRING_INTERPOLATION_END_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 31:
			return this.WHITESPACE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WHITESPACE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\'\u010E\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
		"\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04" +
		"\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04" +
		"\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*" +
		"\t*\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05" +
		"\x04_\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04e\n\x04\r\x04\x0E\x04" +
		"f\x07\x04i\n\x04\f\x04\x0E\x04l\v\x04\x03\x04\x03\x04\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8A\n\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03" +
		" \x06 \xB4\n \r \x0E \xB5\x03 \x03 \x06 \xBA\n \r \x0E \xBB\x05 \xBE\n" +
		" \x03!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\xCA\n\"" +
		"\x03\"\x03\"\x03\"\x07\"\xCF\n\"\f\"\x0E\"\xD2\v\"\x03#\x05#\xD5\n#\x03" +
		"#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x07$\xDF\n$\f$\x0E$\xE2\v$\x03$\x03" +
		"$\x03$\x03$\x03$\x07$\xE9\n$\f$\x0E$\xEC\v$\x03$\x05$\xEF\n$\x03%\x03" +
		"%\x03&\x03&\x03&\x03&\x03&\x03&\x03\'\x05\'\xFA\n\'\x03\'\x03\'\x03(\x03" +
		"(\x03(\x03(\x03(\x06(\u0103\n(\r(\x0E(\u0104\x03(\x03(\x03)\x03)\x05)" +
		"\u010B\n)\x03*\x03*\x04\xE0\xEA\x02\x02+\x04\x02\x02\x06\x02\x02\b\x02" +
		"\x02\n\x02\x03\f\x02\x04\x0E\x02\x05\x10\x02\x06\x12\x02\x07\x14\x02\b" +
		"\x16\x02\t\x18\x02\n\x1A\x02\v\x1C\x02\f\x1E\x02\r \x02\x0E\"\x02\x0F" +
		"$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02\x14.\x02\x150\x02\x162\x02\x17" +
		"4\x02\x186\x02\x198\x02\x1A:\x02\x1B<\x02\x1C>\x02\x1D@\x02\x1EB\x02\x1F" +
		"D\x02 F\x02!H\x02\"J\x02#L\x02\x02N\x02$P\x02%R\x02&T\x02\'\x04\x02\x03" +
		"\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0F\x0F$$))bb}}\x7F\x7F\x06\x02\v" +
		"\v\"\"\xA2\xA2\uFF01\uFF01\x05\x02%%BBaa\x04\x02))^^\x03\x02))\x04\x02" +
		"$$^^\x03\x02$$\x04\x02\f\f\x0F\x0F\x02\u0124\x02\n\x03\x02\x02\x02\x02" +
		"\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02" +
		"\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02" +
		"\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C\x03\x02\x02\x02\x02" +
		"\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03\x02\x02\x02\x02$\x03" +
		"\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02\x02" +
		"\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02\x02" +
		"2\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03\x02" +
		"\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02\x02" +
		"\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02F\x03" +
		"\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x03L\x03\x02\x02" +
		"\x02\x03N\x03\x02\x02\x02\x03P\x03\x02\x02\x02\x03R\x03\x02\x02\x02\x03" +
		"T\x03\x02\x02\x02\x04V\x03\x02\x02\x02\x06X\x03\x02\x02\x02\bZ\x03\x02" +
		"\x02\x02\no\x03\x02\x02\x02\ft\x03\x02\x02\x02\x0Ev\x03\x02\x02\x02\x10" +
		"x\x03\x02\x02\x02\x12z\x03\x02\x02\x02\x14|\x03\x02\x02\x02\x16~\x03\x02" +
		"\x02\x02\x18\x80\x03\x02\x02\x02\x1A\x82\x03\x02\x02\x02\x1C\x89\x03\x02" +
		"\x02\x02\x1E\x8B\x03\x02\x02\x02 \x8D\x03\x02\x02\x02\"\x90\x03\x02\x02" +
		"\x02$\x93\x03\x02\x02\x02&\x95\x03\x02\x02\x02(\x97\x03\x02\x02\x02*\x9A" +
		"\x03\x02\x02\x02,\x9D\x03\x02\x02\x02.\x9F\x03\x02\x02\x020\xA1\x03\x02" +
		"\x02\x022\xA3\x03\x02\x02\x024\xA5\x03\x02\x02\x026\xA7\x03\x02\x02\x02" +
		"8\xA9\x03\x02\x02\x02:\xAB\x03\x02\x02\x02<\xAD\x03\x02\x02\x02>\xAF\x03" +
		"\x02\x02\x02@\xB3\x03\x02\x02\x02B\xBF\x03\x02\x02\x02D\xC9\x03\x02\x02" +
		"\x02F\xD4\x03\x02\x02\x02H\xEE\x03\x02\x02\x02J\xF0\x03\x02\x02\x02L\xF2" +
		"\x03\x02\x02\x02N\xF9\x03\x02\x02\x02P\xFD\x03\x02\x02\x02R\u0108\x03" +
		"\x02\x02\x02T\u010C\x03\x02\x02\x02VW\t\x02\x02\x02W\x05\x03\x02\x02\x02" +
		"XY\t\x03\x02\x02Y\x07\x03\x02\x02\x02Zj\x07}\x02\x02[i\x05B!\x02\\_\x05" +
		"D\"\x02]_\x05H$\x02^\\\x03\x02\x02\x02^]\x03\x02\x02\x02_`\x03\x02\x02" +
		"\x02`d\x07<\x02\x02ae\x05H$\x02be\n\x04\x02\x02ce\x05\b\x04\x02da\x03" +
		"\x02\x02\x02db\x03\x02\x02\x02dc\x03\x02\x02\x02ef\x03\x02\x02\x02fd\x03" +
		"\x02\x02\x02fg\x03\x02\x02\x02gi\x03\x02\x02\x02h[\x03\x02\x02\x02h^\x03" +
		"\x02\x02\x02il\x03\x02\x02\x02jh\x03\x02\x02\x02jk\x03\x02\x02\x02km\x03" +
		"\x02\x02\x02lj\x03\x02\x02\x02mn\x07\x7F\x02\x02n\t\x03\x02\x02\x02op" +
		"\x07b\x02\x02pq\b\x05\x02\x02qr\x03\x02\x02\x02rs\b\x05\x03\x02s\v\x03" +
		"\x02\x02\x02tu\x07-\x02\x02u\r\x03\x02\x02\x02vw\x07/\x02\x02w\x0F\x03" +
		"\x02\x02\x02xy\x07#\x02\x02y\x11\x03\x02\x02\x02z{\x07`\x02\x02{\x13\x03" +
		"\x02\x02\x02|}\x07,\x02\x02}\x15\x03\x02\x02\x02~\x7F\x071\x02\x02\x7F" +
		"\x17\x03\x02\x02\x02\x80\x81\x07\'\x02\x02\x81\x19\x03\x02\x02\x02\x82" +
		"\x83\x07?\x02\x02\x83\x84\x07?\x02\x02\x84\x1B\x03\x02\x02\x02\x85\x86" +
		"\x07#\x02\x02\x86\x8A\x07?\x02\x02\x87\x88\x07>\x02\x02\x88\x8A\x07@\x02" +
		"\x02\x89\x85\x03\x02\x02\x02\x89\x87\x03\x02\x02\x02\x8A\x1D\x03\x02\x02" +
		"\x02\x8B\x8C\x07(\x02\x02\x8C\x1F\x03\x02\x02\x02\x8D\x8E\x07(\x02\x02" +
		"\x8E\x8F\x07(\x02\x02\x8F!\x03\x02\x02\x02\x90\x91\x07~\x02\x02\x91\x92" +
		"\x07~\x02\x02\x92#\x03\x02\x02\x02\x93\x94\x07>\x02\x02\x94%\x03\x02\x02" +
		"\x02\x95\x96\x07@\x02\x02\x96\'\x03\x02\x02\x02\x97\x98\x07>\x02\x02\x98" +
		"\x99\x07?\x02\x02\x99)\x03\x02\x02\x02\x9A\x9B\x07@\x02\x02\x9B\x9C\x07" +
		"?\x02\x02\x9C+\x03\x02\x02\x02\x9D\x9E\x07*\x02\x02\x9E-\x03\x02\x02\x02" +
		"\x9F\xA0\x07+\x02\x02\xA0/\x03\x02\x02\x02\xA1\xA2\x070\x02\x02\xA21\x03" +
		"\x02\x02\x02\xA3\xA4\x07]\x02\x02\xA43\x03\x02\x02\x02\xA5\xA6\x07_\x02" +
		"\x02\xA65\x03\x02\x02\x02\xA7\xA8\x07}\x02\x02\xA87\x03\x02\x02\x02\xA9" +
		"\xAA\x07\x7F\x02\x02\xAA9\x03\x02\x02\x02\xAB\xAC\x07.\x02\x02\xAC;\x03" +
		"\x02\x02\x02\xAD\xAE\x07<\x02\x02\xAE=\x03\x02\x02\x02\xAF\xB0\x07?\x02" +
		"\x02\xB0\xB1\x07@\x02\x02\xB1?\x03\x02\x02\x02\xB2\xB4\x05\x06\x03\x02" +
		"\xB3\xB2\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB3\x03\x02\x02\x02" +
		"\xB5\xB6\x03\x02\x02\x02\xB6\xBD\x03\x02\x02\x02\xB7\xB9\x070\x02\x02" +
		"\xB8\xBA\x05\x06\x03\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02\x02\x02" +
		"\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBE\x03\x02\x02\x02" +
		"\xBD\xB7\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBEA\x03\x02\x02\x02" +
		"\xBF\xC0\t\x05\x02\x02\xC0\xC1\x06!\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2" +
		"\xC3\b!\x04\x02\xC3C\x03\x02\x02\x02\xC4\xCA\x05\x04\x02\x02\xC5\xCA\t" +
		"\x06\x02\x02\xC6\xC7\x07B\x02\x02\xC7\xCA\x07B\x02\x02\xC8\xCA\x04&\'" +
		"\x02\xC9\xC4\x03\x02\x02\x02\xC9\xC5\x03\x02\x02\x02\xC9\xC6\x03\x02\x02" +
		"\x02\xC9\xC8\x03\x02\x02\x02\xCA\xD0\x03\x02\x02\x02\xCB\xCF\x05\x04\x02" +
		"\x02\xCC\xCF\x05\x06\x03\x02\xCD\xCF\x07a\x02\x02\xCE\xCB\x03\x02\x02" +
		"\x02\xCE\xCC\x03\x02\x02\x02\xCE\xCD\x03\x02\x02\x02\xCF\xD2\x03\x02\x02" +
		"\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1E\x03\x02\x02" +
		"\x02\xD2\xD0\x03\x02\x02\x02\xD3\xD5\x07\x0F\x02\x02\xD4\xD3\x03\x02\x02" +
		"\x02\xD4\xD5\x03\x02\x02\x02\xD5\xD6\x03\x02\x02\x02\xD6\xD7\x07\f\x02" +
		"\x02\xD7\xD8\x03\x02\x02\x02\xD8\xD9\b#\x04\x02\xD9G\x03\x02\x02\x02\xDA" +
		"\xE0\x07)\x02\x02\xDB\xDC\x07^\x02\x02\xDC\xDF\t\x07\x02\x02\xDD\xDF\n" +
		"\b\x02\x02\xDE\xDB\x03\x02\x02\x02\xDE\xDD\x03\x02\x02\x02\xDF\xE2\x03" +
		"\x02\x02\x02\xE0\xE1\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE1\xE3\x03" +
		"\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE3\xEF\x07)\x02\x02\xE4\xEA\x07" +
		"$\x02\x02\xE5\xE6\x07^\x02\x02\xE6\xE9\t\t\x02\x02\xE7\xE9\n\n\x02\x02" +
		"\xE8\xE5\x03\x02\x02\x02\xE8\xE7\x03\x02\x02\x02\xE9\xEC\x03\x02\x02\x02" +
		"\xEA\xEB\x03\x02\x02\x02\xEA\xE8\x03\x02\x02\x02\xEB\xED\x03\x02\x02\x02" +
		"\xEC\xEA\x03\x02\x02\x02\xED\xEF\x07$\x02\x02\xEE\xDA\x03\x02\x02\x02" +
		"\xEE\xE4\x03\x02\x02\x02\xEFI\x03\x02\x02\x02\xF0\xF1\v\x02\x02\x02\xF1" +
		"K\x03\x02\x02\x02\xF2\xF3\x07b\x02\x02\xF3\xF4\b&\x05\x02\xF4\xF5\x03" +
		"\x02\x02\x02\xF5\xF6\b&\x06\x02\xF6\xF7\b&\x07\x02\xF7M\x03\x02\x02\x02" +
		"\xF8\xFA\x07\x0F\x02\x02\xF9\xF8\x03\x02\x02\x02\xF9\xFA\x03\x02\x02\x02" +
		"\xFA\xFB\x03\x02\x02\x02\xFB\xFC\x07\f\x02\x02\xFCO\x03\x02\x02\x02\xFD" +
		"\xFE\x07&\x02\x02\xFE\u0102\x07}\x02\x02\xFF\u0103\x05H$\x02\u0100\u0103" +
		"\x05\b\x04\x02\u0101\u0103\n\x04\x02\x02\u0102\xFF\x03\x02\x02\x02\u0102" +
		"\u0100\x03\x02\x02\x02\u0102\u0101\x03\x02\x02\x02\u0103\u0104\x03\x02" +
		"\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0105\x03\x02\x02\x02\u0105" +
		"\u0106\x03\x02\x02\x02\u0106\u0107\x07\x7F\x02\x02\u0107Q\x03\x02\x02" +
		"\x02\u0108\u010A\x07^\x02\x02\u0109\u010B\n\v\x02\x02\u010A\u0109\x03" +
		"\x02\x02\x02\u010A\u010B\x03\x02\x02\x02\u010BS\x03\x02\x02\x02\u010C" +
		"\u010D\n\v\x02\x02\u010DU\x03\x02\x02\x02\x1A\x02\x03^dfhj\x89\xB5\xBB" +
		"\xBD\xC9\xCE\xD0\xD4\xDE\xE0\xE8\xEA\xEE\xF9\u0102\u0104\u010A\b\x03\x05" +
		"\x02\x07\x03\x02\b\x02\x02\x03&\x03\t\x03\x02\x06\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionAntlrLexer.__ATN) {
			ExpressionAntlrLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
		}

		return ExpressionAntlrLexer.__ATN;
	}

}

