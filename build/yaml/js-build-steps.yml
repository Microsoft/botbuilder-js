#variables:
#  PackageVersion: Define this in the calling pipeline.
#  PreviewPackageVersion: Define this in the calling pipeline.
#  PublishTestResults: (optional) Define this in the calling pipeline.

steps:
- task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
  displayName: 'Tag Build with version number. (Skip if a fork PR to avoid access denied error.)'
  inputs:
    tags: |
     v: $(PackageVersion)
     preview v: $(PreviewPackageVersion)
  continueOnError: true
  condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'false'))

- task: NodeTool@0
  displayName: 'Use Node $(NodeVersion)'
  inputs:
    versionSpec: $(NodeVersion)

- task: Cache@2
  inputs:
    key: 'npm | "$(NodeVersion)" | "$(Agent.OS)" | package.json | libraries/*/package.json | testing/*/package.json | tools/package.json'
    path: $(Pipeline.Workspace)/.npm
  displayName: npm cache

- task: Npm@1
  displayName: 'npm install'
  inputs:
    verbose: false

- task: Npm@1
  displayName: '/tools npm install'
  inputs:
    workingDir: tools
    verbose: false

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run build'

- task: Npm@1
  displayName: 'npm run test:devops'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run test:devops'

- task: PublishTestResults@2
  displayName: 'Publish test results to Azure DevOps'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-results.xml' 
    mergeTestResults: true 
    failTaskOnFailedTests: false
    testRunTitle: 'Unit Tests for $(Build.SourceVersion)'
  condition: and(succeeded(), ne(variables['System.PullRequest.IsFork'], 'True'), eq(variables['PublishTestResults'], true))

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: './coverage/cobertura-coverage.xml'
    failIfCoverageEmpty: true
  condition: and(succeeded(), eq(variables['PublishTestResults'], true))
